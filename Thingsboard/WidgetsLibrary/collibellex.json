{
  "widgetsBundle": {
    "alias": "collibellex",
    "title": "Collibellex",
    "image": null,
    "description": "Collibellex Widget Library",
    "externalId": null,
    "name": "Collibellex"
  },
  "widgetTypes": [
    {
      "alias": "3d_chart",
      "name": "3d_chart",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "timeseries",
        "sizeX": 14.5,
        "sizeY": 12.5,
        "resources": [
          {
            "url": "https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js"
          },
          {
            "url": "https://fastly.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js"
          }
        ],
        "templateHtml": "<div id=\"echart\" style=\"width:600px; height:400px;\"></div>\n\n",
        "templateCss": "\n\n",
        "controllerScript": "var myChart;\nvar option = {};\nself.onInit = function() {\n    myChart = echarts.init($('#echart', self.ctx\n        .$container)[0]);\n    \n    var data = [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 167, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]];\n    \n    \n    var settings = self.ctx.settings;\n\n\n\n// prettier-ignore\nvar hours = ['12a', '1a', '2a', '3a', '4a', '5a', '6a',\n    '7a', '8a', '9a', '10a', '11a',\n    '12p', '1p', '2p', '3p', '4p', '5p',\n    '6p', '7p', '8p', '9p', '10p', '11p'];\nif (settings.xAxisType == '24hrs format')\n{\n    hours = ['0:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00',\n    '07:00', '08:00', '09:00', '10:00', '11:00',\n    '12:00', '13:00', '14:00', '15:00', '16:00', '17:00',\n    '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'];\n}\n// prettier-ignore\nvar days = [settings.yAxisSunday, settings.yAxisMonday, settings.yAxisTuesday,\n    settings.yAxisWednesday, settings.yAxisThursday, settings.yAxisFriday, settings.yAxisSaturday];\n    \nif (settings.yAxisType == 'Monday to Friday')\n{\n    days = [settings.yAxisMonday, settings.yAxisTuesday,\n    settings.yAxisWednesday, settings.yAxisThursday, settings.yAxisFriday];\n}\n    \n// prettier-ignore\n\n\n\noption = {\n  tooltip: {\n      formatter: (params) => {\n          var days = [settings.yAxisSunday, settings.yAxisMonday, settings.yAxisTuesday,\n    settings.yAxisWednesday, settings.yAxisThursday, settings.yAxisFriday, settings.yAxisSaturday];\nif (settings.yAxisType == 'Monday to Friday')\n{\n    days = [settings.yAxisMonday, settings.yAxisTuesday,\n    settings.yAxisWednesday, settings.yAxisThursday, settings.yAxisFriday];\n}\nvar hours = ['12a', '1a', '2a', '3a', '4a', '5a', '6a',\n    '7a', '8a', '9a', '10a', '11a',\n    '12p', '1p', '2p', '3p', '4p', '5p',\n    '6p', '7p', '8p', '9p', '10p', '11p'];\n    \nif (settings.xAxisType == '24hrs format')\n{\n    hours = ['0:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00',\n    '07:00', '08:00', '09:00', '10:00', '11:00',\n    '12:00', '13:00', '14:00', '15:00', '16:00', '17:00',\n    '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'];\n}\n\n          return   days[params.value[1]] + \" \" + hours[params.value[0]] + \": \" + params.value[2]\n      \n    },\n  },\n  visualMap: {\n    max: settings.maxZValue || 20,\n    inRange: {\n      color: [\n        '#313695',\n        '#4575b4',\n        '#74add1',\n        '#abd9e9',\n        '#e0f3f8',\n        '#ffffbf',\n        '#fee090',\n        '#fdae61',\n        '#f46d43',\n        '#d73027',\n        '#a50026'\n      ]\n    }\n  },\n  \n  xAxis3D: {\n    type: 'category',\n    data: hours,\n    name: \"\"\n  },\n  yAxis3D: {\n    type: 'category',\n    data: days,\n    name: \"\"\n  },\n  zAxis3D: {\n    type: 'value',\n    name: settings.zAxisUnit || \"Z\"\n  },\n  grid3D: {\n      viewControl:\n      {\n      distance:250\n      },\n    boxWidth: 200,\n    boxDepth: 80,\n    light: {\n      main: {\n        intensity: 1.2\n      },\n      ambient: {\n        intensity: 0.3\n      }\n    }\n    \n  },\n  series: [\n    {\n      type: 'bar3D',\n      data: data.map(function (item) {\n        return {\n          value: [item[1], item[0], item[2]]\n        };\n      }),\n      shading: 'color',\n      label: {\n        show: false,\n        fontSize: 16,\n        borderWidth: 1\n      },\n      itemStyle: {\n        opacity: 0.4\n      },\n      emphasis: {\n        label: {\n          fontSize: 20,\n          color: '#900'\n        },\n        itemStyle: {\n          color: '#900'\n        }\n      }\n    }\n  ]\n};\n\n\n    \n    draw(data);\n\n}\n\nfunction draw(data)\n{\n    option.series[0].data = data.map(function (item) {\n        return {\n          value: [item[1], item[0], item[2]]\n        };\n      })\n    option && myChart.setOption(option);\n}\n\nself.onDataUpdated = function() {\n    settings = self.ctx.settings;\n        var data = [];\n        var datasourceData = self.ctx.data[0];\n        var dataSet = datasourceData.data;\n        let currentHourCalculate = 0;\n        let currentHourValue = 0;\n        for (var d = 0; d < dataSet.length; d++) {\n            \n            var tsValuePair = dataSet[d];\n            var ts = tsValuePair[0];\n            var value = tsValuePair[1];\n            \n            var dt=new Date(ts);\n            \n            var day = dt.getDay();\n            \n            var hour = dt.getHours();\n            console.log (hour);\n            if (hour != currentHourCalculate)\n            {\n                if (settings.yAxisType == 'Monday to Friday')\n                {\n                    \n                    day = day - 1;\n                }\n                data.push([day, currentHourCalculate, currentHourValue]);\n                \n                currentHourValue = 0;\n            }\n            currentHourValue = currentHourValue + value;\n            \n            currentHourCalculate = hour;\n        }\n        console.log (data);\n        draw (data);\n        \n    \n}\n\nself.onLatestDataUpdated = function() {\n}\n\nself.onResize = function() {\n   myChart.resize({\n  width: self.ctx.width,\n  height: self.ctx.height - 20\n});\n\n\n}\n\n\n\n\n\nself.onEditModeChanged = function() {\n\n}\n\nself.onMobileModeChanged = function() {\n\n}\n\nself.getSettingsSchema = function() {\n\n}\n\nself.getDataKeySettingsSchema = function() {\n\n}\n\nself.onDestroy = function() {\n\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"maxZValue\": {\n                \"title\": \"Max. Z Value\",\n                \"type\": \"number\",\n                \"default\": 20\n            },\n            \"zAxisUnit\": {\n                \"title\": \"Unit Z Axis\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"yAxisType\": {\n                            \"title\": \"Y Axis Type\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Monday to Sunday\",\n                                \"Monday to Friday\"\n                            ],\n                            \"default\": \"Monday to Friday\"\n                        },\n            \"xAxisType\": {\n                            \"title\": \"X Axis Type\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"12hrs format\",\n                                \"24hrs format\"\n                            ],\n                            \"default\": \"24hrs format\"\n                        },\n            \n         \"yAxisMonday\":\n         {\n                \"title\": \"Y Axis Monday Text\",\n                \"type\": \"string\",\n                \"default\": \"Monday\"\n            },\n            \"yAxisTuesday\": {\n                \"title\": \"Y Axis Tuesday Text\",\n                \"type\": \"string\",\n                \"default\": \"Tuesday\"\n            },\n            \"yAxisWednesday\": {\n                \"title\": \"Y Axis Wednesday Text\",\n                \"type\": \"string\",\n                \"default\": \"Wednesday\"\n            },\n            \"yAxisThursday\": {\n                \"title\": \"Y Axis Thursday Text\",\n                \"type\": \"string\",\n                \"default\": \"Thursday\"\n            },\n            \"yAxisFriday\": {\n                \"title\": \"Y Axis Friday Text\",\n                \"type\": \"string\",\n                \"default\": \"Friday\"\n            },\n            \"yAxisSaturday\": {\n                \"title\": \"Y Axis Saturday Text\",\n                \"type\": \"string\",\n                \"default\": \"Saturday\"\n            },\n            \"yAxisSunday\": {\n                \"title\": \"Y Axis Sunday Text\",\n                \"type\": \"string\",\n                \"default\": \"Sunday\"\n            },\n         \"required\": [\"maxZValue\"]\n        }\n        },\n    \"form\": [\n        \"maxZValue\",\n        \"zAxisUnit\",\n        \"yAxisType\",\n        \"xAxisType\",\n        \"yAxisMonday\",\n        \"yAxisTuesday\",\n        \"yAxisWednesday\",\n        \"yAxisThursday\",\n        \"yAxisFriday\",\n        \"yAxisSaturday\",\n        \"yAxisSunday\"\n        \n \n    ]\n\n}",
        "dataKeySettingsSchema": "",
        "latestDataKeySettingsSchema": "",
        "settingsDirective": "",
        "dataKeySettingsDirective": "",
        "latestDataKeySettingsDirective": "",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"maxZValue\":25,\"zAxisUnit\":\"Pieces\",\"yAxisType\":\"Monday to Friday\"},\"title\":\"3d_chart\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null}"
      }
    },
    {
      "alias": "chart2",
      "name": "Chart 2",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "timeseries",
        "sizeX": 10,
        "sizeY": 9,
        "resources": [
          {
            "url": "https://cdn.jsdelivr.net/npm/echarts@5.2.2/dist/echarts.min.js"
          }
        ],
        "templateHtml": "<div id=\"echart\" style=\"width:600px; height:400px;\"></div>",
        "templateCss": ".legend {\n    font-size: 13px;\n    line-height: 10px;\n}\n\n.legend table { \n    border-spacing: 0px;\n    border-collapse: separate;\n}\n\n.mouse-events .flot-overlay {\n    cursor: crosshair; \n}\n\n",
        "controllerScript": "var seriesMarkLine = {}\nvar myChart;\nvar option;\nvar serverAttributes = [];\nvar clientAttributes = [];\n\nself.onInit = function() {\n    var settings = self.ctx.settings;\n    if (self.ctx.settings.annotations !== undefined) {\n        var clientAttributesToPoll = []\n        var serverAttributesToPoll = []\n        var clientAttributesCounter = 0;\n        var serverAttributesCounter = 0;\n\n        for (var i = 0; i < self.ctx.settings\n            .annotations.length; i++) {\n            if ((self.ctx.settings.annotations[i]\n                    .attributeType == 'Client') && (self\n                    .ctx.settings.annotations[i]\n                    .annotationsType == 'Attribute')) {\n                if (clientAttributesCounter > 0)\n                    clientAttributesToPoll =\n                    clientAttributesToPoll + ','\n                clientAttributesToPoll.push(self.ctx\n                    .settings.annotations[i]\n                    .attribute);\n                clientAttributesCounter++;\n            }\n            if ((self.ctx.settings.annotations[i]\n                    .attributeType == 'Server') && (self\n                    .ctx.settings.annotations[i]\n                    .annotationsType == 'Attribute')) {\n\n\n                if (serverAttributesCounter > 0)\n                    serverAttributesToPoll =\n                    serverAttributesToPoll + ','\n                serverAttributesToPoll.push(self.ctx\n                    .settings.annotations[i]\n                    .attribute);\n                serverAttributesCounter++;\n            }\n\n        }\n    }\n\n\n\n\n\n\n    if (clientAttributesToPoll !== '') {\n        var entityId = self.ctx.datasources[0].entityId;\n        var entity = {\n            entityType: 'DEVICE',\n            id: entityId\n        }\n\n        self.ctx.attributeService.getEntityAttributes(\n            entity, 'CLIENT_SCOPE',\n            clientAttributesToPoll\n        ).subscribe((attributes) => {\n\n            //Add Annotations that has been defined as ClientAttributes\n            annotiatons = [];\n            for (var i = 0; i < attributes\n                .length; i++) {{\n\n                \n                for (var j = 0; j < self.ctx\n                    .settings.annotations\n                    .length; j++) {\n                    if (self.ctx.settings\n                        .annotations[j]\n                        .attribute ==\n                        attributes[i].key) {\n                            \n                            \n                            \n                        clientAttributes.push(\n                            {\n                                'key': attributes[i].key,\n                                'value': parseFloat(attributes[i].value),\n                                'color': self.ctx\n                            .settings\n                            .annotations[j]\n                            .color,\n                            'axisAssignment': self.ctx.settings.annotations[j].axisAssignment\n                            });\n                            \n                            \n\n\n                        \n                    }\n                    \n                }\n                }\n                }\n                \n\n\n        })\n    }\n\n\n\n\n    if (serverAttributesToPoll !== '') {\n\n        var entityId = self.ctx.datasources[0].entityId;\n        var entity = {\n            entityType: 'DEVICE',\n            id: entityId\n        }\n\n        self.ctx.attributeService.getEntityAttributes(\n            entity, 'SERVER_SCOPE',\n            serverAttributesToPoll\n        ).subscribe((attributes) => {\n\n            //Add Annotations that has been defined as ClientAttributes\n            annotiatons = [];\n            \n            for (var i = 0; i < attributes\n                .length; i++) {\n\n                \n                for (var j = 0; j < self.ctx\n                    .settings.annotations\n                    .length; j++) {\n                    if (self.ctx.settings\n                        .annotations[j]\n                        .attribute ==\n                        attributes[i].key) {\n                            \n                            \n                            \n                        serverAttributes.push(\n                            {\n                                'key': attributes[i].key,\n                                'value': parseFloat(attributes[i].value),\n                                'color': self.ctx\n                            .settings\n                            .annotations[j]\n                            .color,\n                            'axisAssignment': self.ctx.settings.annotations[j].axisAssignment\n                            });\n                            \n                            \n\n\n                        \n                    }\n                    \n                }\n            }\n            \n        })\n    }\n    \n    \n    \n    self.onResize();\n\n\n}\n\n    function adjustHexOpacity(color, opacity) {\n        \n        const r = parseInt(color.slice(1, 3), 16);\n        const g = parseInt(color.slice(3, 5), 16);\n        const b = parseInt(color.slice(5, 7), 16);\n\n        return 'rgba(' + r + ', ' + g + ', ' + b + ', ' +\n            opacity + ')';\n    }\n\nfunction draw() {\n    \nlet seriesMarkLine = {\n\n    data: []\n}\n\n    var data1 = [\n        [1640968951095, 2],\n        [1640968961095, 4],\n        [1640968971095, 6],\n        [1640968981095, 8]\n    ];\n\n    var data2 = [\n        [1640968951095, 1],\n        [1640968961095, 2],\n        [1640968971095, 3],\n        [1640969981095, 4]\n    ];\n\n\n    myChart = echarts.init($('#echart', self.ctx\n        .$container)[0]);\n\n\n    var legend = Array();\n    var series = Array();\n\n\n    for (var i = 0; i < self.ctx.data.length; i++) {\n        var settings = self.ctx.data[i].dataKey.settings;\n        let legendElement = self.ctx.data[i].dataKey.label\n        //legend.push(legendElement);\n\n\n        let dataElement = Array();\n        var datasourceData = self.ctx.data[i];\n        var dataSet = datasourceData.data;\n        var dataToAdd = Array();\n        for (var d = 0; d < dataSet.length; d++) {\n            var tsValuePair = dataSet[d];\n            var ts = tsValuePair[0];\n            var value = tsValuePair[1];\n\n            dataElement.push([ts, value.toFixed(settings\n                .numberOfDigits || 1)]);\n        }\n        dataToAdd.push(dataElement);\n\n\n\n        let seriesMarkLineData = {\n            type: 'average',\n            name: 'Average'\n        }\n        if (settings.showAverage)\n            seriesMarkLine.data.push(seriesMarkLineData)\n\n        \n\n\n\n\n        var markPoint = {\n            data: [\n\n            ]\n        }\n        if (settings.showMinValue)\n            markPoint.data.push({\n                type: 'min',\n                name: 'min'\n            })\n        if (settings.showMaxValue)\n            markPoint.data.push({\n                type: 'max',\n                name: 'max'\n            })\n\n\n\n        let seriesElement = {\n            name: legendElement,\n            itemStyle: {\n                normal: {\n                    color: self.ctx.data[i].dataKey\n                        .color\n                }\n            },\n            type: (settings.chartType == 'Bar') ?\n                'bar' : 'line',\n            yAxisIndex: (settings.axisAssignment ==\n                'Right') ? 1 : 0,\n            data: dataElement,\n            symbol: (self.ctx.settings.showDataPoints) ?\n                'circle' : 'none',\n            markLine: seriesMarkLine,\n            markPoint: markPoint,\n\n\n        }\n\n        if (settings.fillChart) {\n\n            let color1 = settings.gradientColor1 ||\n                '#0366fc'\n\n            let color2 = settings.gradientColor2 ||\n                '#a7c5f2'\n            seriesElement.areaStyle = {\n                color: new echarts.graphic\n                    .LinearGradient(0, 0, 0, 1, [{\n                            offset: 0,\n                            color: adjustHexOpacity(\n                                color1, settings.fillOpacity)\n                        },\n                        {\n                            offset: 1,\n                            color: adjustHexOpacity(\n                                color2, settings.fillOpacity)\n                        }\n                    ])\n            }\n\n\n\n        }\n\n\n\n        series.push(seriesElement)\n\n\n\n\n\n    }\n    \n    \n    \n\n \n\n\n\n    option = {\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n                type: 'cross',\n                crossStyle: {\n                    color: '#999'\n                }\n            }\n        },\n        toolbox: {\n\n            feature: {\n                dataView: {\n                    show: true,\n                    readOnly: false\n                },\n                //magicType: {show: true, type: ['line', 'bar']},\n                //restore: {show: true},\n                saveAsImage: {\n                    show: true\n                },\n                dataZoom: {\n                    yAxisIndex: 'none'\n                },\n                restore: {}\n            }\n        },\n        legend: {\n            data: legend\n        },\n        xAxis: [{\n            type: 'time',\n            axisLabel: {\n                hideOverlap: true\n            }\n\n            //axisPointer: {\n            //    type: 'shadow'\n            //}\n        }],\n        dataZoom: [{\n            type: 'inside',\n            throttle: 50\n        }]\n        ,\n        yAxis: [{\n                type: 'value',\n                name: self.ctx.settings\n                    .yAxisLeftTitle || '',\n\n                //interval: 50,\n                axisLabel: {\n                    formatter: '{value} ' + (self\n                        .ctx.settings\n                        .yAxisLeftUnit || 'ml')\n                }\n            },\n            {\n                type: 'value',\n                name: self.ctx.settings\n                    .yAxisRightTitle || '',\n\n                //interval: 5,\n                axisLabel: {\n                    formatter: '{value} ' + (self\n                        .ctx.settings\n                        .yAxisRightUnit || 'ml')\n                }\n            }\n        ],\n        series: series\n    };\n        if (self.ctx.settings.showPanZoomTool){\n         option.dataZoom.push(   \n        {\n            \n                start: 0,\n                stop: 100\n            \n        })\n        \n    \n        }\n\n    if (!self.ctx.settings.yAxisLeftAutoScale) {\n\n        option.yAxis[0].min = self.ctx.settings\n            .yAxisLeftMinScale || 0,\n            option.yAxis[0].max = self.ctx.settings\n            .yAxisLeftMaxScale || 100\n    }\n    if (!self.ctx.settings.yAxisRightAutoScale) {\n\n        option.yAxis[1].min = self.ctx.settings\n            .yAxisRightMinScale || 0,\n            option.yAxis[1].max = self.ctx.settings\n            .yAxisRightMaxScale || 100\n    }\n\n    myChart.setOption(option);\n    myChart.resize();\n    \n\n}\n\nself.onDataUpdated = function() {\n\n    //self.onResize();\n    var series = Array();\n    for (var i = 0; i < self.ctx.data.length; i++) {\n            let seriesMarkLine = {\n\n    data: []\n}\n        var settings = self.ctx.data[i].dataKey.settings;\n        let legendElement = self.ctx.data[i].dataKey.label\n        //legend.push(legendElement);\n\n\n        let dataElement = Array();\n        var datasourceData = self.ctx.data[i];\n        var dataSet = datasourceData.data;\n        var dataToAdd = Array();\n        for (var d = 0; d < dataSet.length; d++) {\n            var tsValuePair = dataSet[d];\n            var ts = tsValuePair[0];\n            var value = tsValuePair[1];\n\n            dataElement.push([ts, value.toFixed(settings\n                .numberOfDigits || 1)]);\n        }\n        dataToAdd.push(dataElement);\n\n\n\n        var seriesMarkLineData = {\n            type: 'average',\n            name: 'Average'\n        }\n        if (settings.showAverage)\n            seriesMarkLine.data.push(seriesMarkLineData)\n\n        if (self.ctx.settings.annotations != undefined) {\n\n            \n        }\n\n\n\n\n        var markPoint = {\n            data: [\n\n            ]\n        }\n        if (settings.showMinValue)\n            markPoint.data.push({\n                type: 'min',\n                name: 'min'\n            })\n        if (settings.showMaxValue)\n            markPoint.data.push({\n                type: 'max',\n                name: 'max'\n            })\n\n\n\n        let seriesElement = {\n            name: legendElement,\n            itemStyle: {\n                normal: {\n                    color: self.ctx.data[i].dataKey\n                        .color\n                }\n            },\n            type: (settings.chartType == 'Bar') ?\n                'bar' : 'line',\n            yAxisIndex: (settings.axisAssignment ==\n                'Right') ? 1 : 0,\n            data: dataElement,\n            symbol: (self.ctx.settings.showDataPoints) ?\n                'circle' : 'none',\n            markLine: seriesMarkLine,\n            markPoint: markPoint,\n\n\n        }\n\n        if (settings.fillChart) {\n            let color1 = settings.gradientColor1 ||\n                '#0366fc'\n\n            let color2 = settings.gradientColor2 ||\n                '#a7c5f2'\n            seriesElement.areaStyle = {\n                color: new echarts.graphic\n                    .LinearGradient(0, 0, 0, 1, [{\n                            offset: 0,\n                            color: adjustHexOpacity(\n                                color1, settings.fillOpacity)\n                        },\n                        {\n                            offset: 1,\n                            color: adjustHexOpacity(\n                                color2, settings.fillOpacity)\n                        }\n                    ])\n            }\n        }\n        series.push(seriesElement)\n    }\n    \n    // Add Fixed Annotations\n    if (self.ctx.settings.annotations != undefined) {\n\n            for (var j = 0; j < self.ctx.settings\n                .annotations.length; j++) {\n                var color = self.ctx.settings\n                .annotations[j].color || 'blue';\n                \n                let seriesMarkLineData1 = {\n                    yAxis: self.ctx.settings\n                        .annotations[j].fixedNumber,\n                    name: self.ctx.settings\n                        .annotations[j].description,\n                    lineStyle: {\n                        type: \"solid\", \n                        color: color,\n                        width: 2\n                    \n                    },\n                    label:{\n                        position: 'middle',\n                        formatter: '{b}: {c}'\n                    } \n                }\n                \n                if (self.ctx.settings\n                        .annotations[j].description == undefined)\n                        seriesMarkLineData1.label.formatter = '{c}'\n                \n                for (var i = 0; i < self.ctx.data.length; i++)\n            {\n                \n                if (self.ctx.settings.annotations[j]\n                    .annotationsType == 'Fixed')\n                    {\n                if ((self.ctx.settings.annotations[j].axisAssignment ==\n                'Right') &&  (series[i].yAxisIndex == 1))\n                {\n                    \n                    series[i].markLine.data.push(seriesMarkLineData1)\n                    \n                    break;\n                }\n                if ((self.ctx.settings.annotations[j].axisAssignment ==\n                'Left') &&  (series[i].yAxisIndex == 0))\n                {\n                 \n                series[i].markLine.data.push(seriesMarkLineData1)\n                break;\n                }\n                \n            }\n            }\n            }\n            \n            \n        }\n        \n        \n        \n    // Add Server Atttribute Annotations\n    if (self.ctx.settings.annotations != undefined) {\n            \n            for (var j = 0; j < serverAttributes.length; j++) {\n\n                \n                let seriesMarkLineData1 = {\n                    yAxis: serverAttributes[j].value,\n                    name: serverAttributes[j].key,\n                    lineStyle: {\n                        type: \"solid\", \n                        color: serverAttributes[j].color,\n                        width: 2\n                    \n                    },\n                    label:{\n                        position: 'middle',\n                        formatter: '{b}: {c}'\n                    } \n                }\n                \n\n                \n                for (var i = 0; i < self.ctx.data.length; i++)\n            {\n\n\n                if ((serverAttributes[j].axisAssignment ==\n                'Right') &&  (series[i].yAxisIndex == 1))\n                {\n                    \n                    series[i].markLine.data.push(seriesMarkLineData1)\n                    \n                    break;\n                }\n                if ((serverAttributes[j].axisAssignment ==\n                'Left') &&  (series[i].yAxisIndex == 0))\n                {\n                 \n                series[i].markLine.data.push(seriesMarkLineData1)\n                break;\n                }\n                \n            \n            }\n            }\n            \n            \n        }\n        \n        \n        // Add Client Atttribute Annotations\n    if (self.ctx.settings.annotations != undefined) {\n            \n            for (var j = 0; j < clientAttributes.length; j++) {\n\n                \n                let seriesMarkLineData1 = {\n                    yAxis: clientAttributes[j].value,\n                    name: clientAttributes[j].key,\n                    lineStyle: {\n                        type: \"solid\", \n                        color: clientAttributes[j].color,\n                        width: 2\n                    \n                    },\n                    label:{\n                        position: 'middle',\n                        formatter: '{b}: {c}'\n                    } \n                }\n                \n\n                \n                for (var i = 0; i < self.ctx.data.length; i++)\n            {\n\n                \n                if ((clientAttributes[j].axisAssignment ==\n                'Right') &&  (series[i].yAxisIndex == 1))\n                {\n                    \n                    series[i].markLine.data.push(seriesMarkLineData1)\n                    \n                    break;\n                }\n                if ((clientAttributes[j].axisAssignment ==\n                'Left') &&  (series[i].yAxisIndex == 0))\n                {\n                 \n                series[i].markLine.data.push(seriesMarkLineData1)\n                \n                break;\n                }\n                \n            \n            }\n            }\n            \n            \n        }\n    \n    if (myChart != undefined)\n    {\n    option.series = series;\n    myChart.setOption(option);\n    }\n    \n\n}\n\nself.onResize = function() {\n\n    $('#echart', self.ctx.$container)[0].style.height =\n        self.ctx.height + \"px\";\n    $('#echart', self.ctx.$container)[0].style.width = (\n        self.ctx.width - 15) + \"px\";\n    $('#echart', self.ctx.$container)[0].style\n        .paddingLeft = (5) + \"px\";\n\n    draw();\n    self.onDataUpdated();\n}\n\nself.onEditModeChanged = function() {\n\n}\n\nself.onMobileModeChanged = function() {\n\n}\n\nself.getSettingsSchema = function() {\n\n}\n\nself.getDataKeySettingsSchema = function() {\n\n}\n\nself.onDestroy = function() {\n\n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"yAxisLeftTitle\": {\n                \"title\": \"Title Left Y-Axis\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"yAxisLeftUnit\": {\n                \"title\": \"Unit Left Y-Axis\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"yAxisRightTitle\": {\n                \"title\": \"Title Right Y-Axis\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"yAxisRightUnit\": {\n                \"title\": \"Unit Right Y-Axis\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"showDataPoints\": {\n                \"title\": \"Show Data points\",\n                \"type\": \"boolean\",\n                \"default\": false\n            }\n            ,\n            \"showPanZoomTool\": {\n                \"title\": \"Show Pan and Zoom tool\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \n            \"yAxisLeftAutoScale\": {\n                \"title\": \"Left Y-Axis Autoscale\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"yAxisLeftMinScale\": {\n                \"title\": \"Left Y-Axis Min-Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"yAxisLeftMaxScale\": {\n                \"title\": \"Left Y-Axis Max-Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"yAxisRightAutoScale\": {\n                \"title\": \"Right Y-Axis Autoscale\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"yAxisRightMinScale\": {\n                \"title\": \"Right Y-Axis Min-Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"yAxisRightMaxScale\": {\n                \"title\": \"Right Y-Axis Max-Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"annotations\": {\n                \"title\": \"Annotations\",\n                \"type\": \"array\",\n                \"minItems\": 0,\n                \"items\": {\n                    \"title\": \"Attribute\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"annotationsType\": {\n                            \"title\": \"Annotations Type\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Fixed\",\n                                \"Attribute\"\n                            ],\n                            \"default\": \"Fixed\"\n                        },\n                        \"fixedNumber\": {\n                \"title\": \"Fixed Number\",\n                \"type\": \"number\",\n                \"default\": 10\n            },\n                        \"attribute\": {\n                            \"title\": \"Attribute\",\n                            \"type\": \"string\"\n                        },\n                        \"description\": {\n                            \"title\": \"Description\",\n                            \"type\": \"string\"\n                        },\n                        \"color\": {\n                            \"title\": \"Color\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Red\",\n                                \"Green\",\n                                \"Blue\",\n                                \"Yellow\"\n                            ],\n                            \"default\": \"Green\"\n                        },\n\n                        \"attributeType\": {\n                            \"title\": \"Attribute Type\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Client\",\n                                \"Server\"\n                            ],\n                            \"default\": \"Client\"\n                        },\n                        \"axisAssignment\": {\n                            \"title\": \"Axis Assignment\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Left\",\n                                \"Right\"\n                            ],\n                            \"default\": \"Left\"\n                        }\n                    },\n                    \"required\": [\"color\"]\n                }\n            }\n            \n        }\n        },\n    \"form\": [\n        \"yAxisLeftTitle\",\n        \"yAxisLeftUnit\",\n        \"yAxisLeftAutoScale\",\n        \"yAxisLeftMinScale\",\n        \"yAxisLeftMaxScale\",\n        \"yAxisRightTitle\",\n        \"yAxisRightUnit\",\n        \"yAxisRightAutoScale\",\n        \"yAxisRightMinScale\",\n        \"yAxisRightMaxScale\",\n        \"showDataPoints\",\n        \"showPanZoomTool\",\n        \"annotations\"\n        \n        \n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"chartType\": {\n                \"title\": \"Type\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"Line\",\n                    \"Bar\"],\n                \"default\": \"Line\"\n            },\n            \"showAverage\": {\n                \"title\": \"Show horizonal average line\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"showMinValue\": {\n                \"title\": \"Show min. Value\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"showMaxValue\": {\n                \"title\": \"Show max. value\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \n            \n            \n            \"gradientColor1\": {\n                \"title\": \"Gradient Color 1\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            },\n            \"gradientColor2\": {\n                \"title\": \"Gradient Color 2\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            },\n            \n            \"fillOpacity\": {\n                \"title\": \"Fill Opacity\",\n                \"type\": \"number\",\n                \"minimum\": 0,\n                \"maximum\": 1,\n                \"default\": 0.5\n            },\n            \"fillChart\": {\n                \"title\": \"fill Chart\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"axisAssignment\": {\n                \"title\": \"Axis Assignment\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"Left\",\n                    \"Right\"],\n                \"default\": \"Left\"\n            },\n            \"numberOfDigits\": {\n                \"title\": \"Number of Digits\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n        \n        \"required\": [\n                    ]\n        }\n        },\n    \"form\": [\n        \"chartType\",\n        \n        \n        \"showAverage\",\n        \"showMinValue\",\n        \"showMaxValue\",\n        \n        \n        \"fillChart\",\n        {\n            \"key\": \"gradientColor1\",\n            \"type\": \"color\"\n        },\n        {\n            \"key\": \"gradientColor2\",\n            \"type\": \"color\"\n        },\n        \"fillOpacity\",\n        \"axisAssignment\",\n        \"numberOfDigits\"\n    ]\n}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"yAxisLeftAutoScale\":true,\"yAxisLeftMaxScale\":100,\"yAxisRightAutoScale\":true,\"yAxisRightMaxScale\":100,\"showPanZoomTool\":true,\"annotations\":[{\"annotationsType\":\"Fixed\",\"fixedNumber\":10,\"color\":\"Red\",\"attributeType\":\"Client\",\"axisAssignment\":\"Left\"}]},\"title\":\"Chart 2\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null}"
      }
    },
    {
      "alias": "static",
      "name": "Change Dashboard State",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 2.5,
        "resources": [],
        "templateHtml": "<div id=\"changeDashboardState\">\n<span id=\"dashboardStateLabel\">Change Dashboard State</span>\n<select id=\"dashboardState\" name=\"dashboardState\">\n     \n    </select>\n    </div>",
        "templateCss": "#changeDashboardState {\n\nwidth: 100%;\n    top: 50%;\n    text-align: center;\n    position: absolute;\n}\n\n#dashboardState\n{\n    margin-left: 5px;\n}",
        "controllerScript": "self.onInit = function() {\n  \n    var settings = self.ctx.settings;\n    //set Font size of select\n    $('#dashboardState', self.ctx.$container)[0].style.fontSize = settings.fontSize + \"px\";\n    //set Font size of label\n    $('#dashboardStateLabel', self.ctx.$container)[0].style.fontSize = settings.fontSize + \"px\";\n    \n    //set Font color of Select\n    $('#dashboardState', self.ctx.$container)[0].style.color = settings.fontColor;\n    //set Font color of Label\n    $('#dashboardStateLabel', self.ctx.$container)[0].style.color = settings.fontColor;\n    \n    //set Label Text according to settings\n    $('#dashboardStateLabel', self.ctx.$container)[0].innerHTML = settings.labelText;\n    \n  \n    //Add Options to the Select\n    for (var i = 0; i < settings.dashboardStateList.length; i++)\n    {\n        $('#dashboardState', self.ctx.$container).append($('<option>', {\n                    text: settings.dashboardStateList[i].listEntry\n                }));\n    }\n    \n    \n    //Select changed\n    $('#dashboardState', self.ctx.$container).change(function() {\n    var listEntry = ('#dashboardState', self.ctx.$container).find(\":selected\").text()\n    console.log(\"list Entry:\" + listEntry)\n    \n    //Get Alias for the given name\n    var alias = settings.dashboardStateList[0].dashboardAlias;\n    for (var i = 0; i < settings.dashboardStateList.length; i++)\n    {\n        if (settings.dashboardStateList[i].listEntry == listEntry)\n        {\n            alias = settings.dashboardStateList[i].dashboardAlias;\n            break;\n        }\n    }\n    \n  var selection = alias;\n\n  var stateController = self.ctx.stateController;\n  var stateID = stateController.getStateId();\n  var params = stateController.getStateParams();\n\n  var entityId = (getEntityID(selection));\n \n  params.entityName = selection;\n  params.entityId.id = entityId;\n  \n    \nstateController.resetState();\n  stateController.updateState(stateID=stateID, params=params, true);\n  \n  \n});\n\n\nfunction getEntityID (alias)\n{\n    var aliases = self.ctx.dashboard.aliasController.entityAliases;\n   for (let element in aliases)\n   {\n       \n        if (aliases[element].alias == alias)\n            return aliases[element].filter.singleEntity.id;\n   }\n        \n}\n    \n\n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \n            \"fontSize\": {\n                \"title\": \"Font size\",\n                \"type\": \"number\",\n                \"default\": 16\n            },\n            \"fontColor\": {\n                \"title\": \"Font color\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            },\n            \"labelText\": {\n                \"title\": \"Label Text\",\n                \"type\": \"string\",\n                \"default\": \"Change Dashboard State\"\n            },\n            \"dashboardStateList\": {\n                \"title\": \"Dashboard State list\",\n                \"type\": \"array\",\n                \"minItems\" : 1,\n                \"items\": {\n                    \"title\": \"Dashboard State\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"dashboardAlias\": {\n                            \"title\": \"Dashboard Alias\",\n                            \"type\": \"string\"\n                        },\n                        \"listEntry\": {\n                            \"title\": \"List Entry\",\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\"dashboardAlias\", \"listEntry\"]\n                }\n            }\n            },\n        \"required\": [\"dashboardStateList\"]\n    },\n    \"form\": [\n        \"fontSize\",\n        \"fontColor\",\n        \"labelText\",\n        \"dashboardStateList\"\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"dashboardStateList\":[{\"name\":\"test\",\"dashboardAlias\":\"CAG1D1\",\"listEntry\":\"Device 1\"}],\"fontSize\":16,\"fontColor\":\"#008a00\",\"labelText\":\"Change Dashboard State\"},\"title\":\"Change Dashboard State\",\"dropShadow\":true}"
      }
    },
    {
      "alias": "fluid_level_12",
      "name": "fluid level 1",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 8,
        "sizeY": 9,
        "resources": [],
        "templateHtml": "<div id=\"fluid-meter-3\"></div>\n\n",
        "templateCss": "#container {\n    overflow: auto;\n    \n}\n",
        "controllerScript": "function FluidMeter() {\n  \n  var context;\n  var targetContainer;\n\n  var time = null;\n  var dt = null;\n\n  var options = {\n    drawShadow: true,\n    drawText: true,\n    drawPercentageSign: true,\n    drawBubbles: true,\n    fontSize: \"70px\",\n    fontFamily: \"Arial\",\n    fontFillStyle: \"white\",\n    size: 300,\n    borderWidth: 25,\n    backgroundColor: \"#e2e2e2\",\n    foregroundColor: \"#fafafa\"\n  };\n\n  var currentFillPercentage = 0;\n  var fillPercentage = 0;\n  var valueText = 0;\n\n  //#region fluid context values\n  var foregroundFluidLayer = {\n    fillStyle: \"purple\",\n    angle: 0,\n    horizontalPosition: 0,\n    angularSpeed: 0,\n    maxAmplitude: 9,\n    frequency: 30,\n    horizontalSpeed: -150,\n    initialHeight: 0\n  };\n\n  var backgroundFluidLayer = {\n    fillStyle: \"pink\",\n    angle: 0,\n    horizontalPosition: 0,\n    angularSpeed: 140,\n    maxAmplitude: 12,\n    frequency: 40,\n    horizontalSpeed: 150,\n    initialHeight: 0\n  };\n\n  var bubblesLayer = {\n    bubbles: [],\n    amount: 12,\n    speed: 20,\n    current: 0,\n    swing: 0,\n    size: 2,\n    reset: function (bubble) {\n      // calculate the area where to spawn the bubble based on the fluid area\n      var meterBottom = (options.size - (options.size - getMeterRadius()) / 2) - options.borderWidth;\n      var fluidAmount = currentFillPercentage * (getMeterRadius() - options.borderWidth * 2) / 100;\n\n      bubble.r = random(this.size, this.size * 2) / 2;\n      bubble.x = random(0, options.size);\n      bubble.y = random(meterBottom, meterBottom - fluidAmount);\n      bubble.velX = 0;\n      bubble.velY = random(this.speed, this.speed * 2);\n      bubble.swing = random(0, 2 * Math.PI);\n    },\n    init() {\n      for (var i = 0; i < this.amount; i++) {\n\n        var meterBottom = (options.size - (options.size - getMeterRadius()) / 2) - options.borderWidth;\n        var fluidAmount = currentFillPercentage * (getMeterRadius() - options.borderWidth * 2) / 100;\n        this.bubbles.push({\n          x: random(0, options.size),\n          y: random(meterBottom, meterBottom - fluidAmount),\n          r: random(this.size, this.size * 2) / 2,\n          velX: 0,\n          velY: random(this.speed, this.speed * 2)\n        });\n      }\n    }\n  }\n  //#endregion\n\n  /**\n   * initializes and mount the canvas element on the document\n   */\n  function setupCanvas() {\n    var canvas = document.createElement('canvas');\n    canvas.width = options.size;\n    canvas.height = options.size;\n    \n    canvas.imageSmoothingEnabled = true;\n    context = canvas.getContext(\"2d\");\n    targetContainer.appendChild(canvas);\n\n    // shadow is not required  to be on the draw loop\n    //#region shadow\n    if (options.drawShadow) {\n      context.save();\n      context.beginPath();\n      context.filter = \"drop-shadow(0px 4px 6px rgba(0,0,0,0.1))\";\n      context.arc(options.size / 2, options.size / 2, getMeterRadius() / 2, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.restore();\n    }\n    //#endregion\n  }\n\n  /**\n   * draw cycle\n   */\n  function draw() {\n    var now = new Date().getTime();\n    dt = (now - (time || now)) / 1000;\n    time = now;\n\n    requestAnimationFrame(draw);\n    context.clearRect(0, 0, options.width, options.height);\n    drawMeterBackground();\n    drawFluid(dt);\n    if (options.drawText) {\n      drawText();\n    }\n    drawMeterForeground();\n  }\n\n  function drawMeterBackground() {\n    context.save();\n    context.fillStyle = options.backgroundColor;\n    context.beginPath();\n    context.arc(options.size / 2, options.size / 2, getMeterRadius() / 2 - options.borderWidth, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n    context.restore();\n  }\n\n  function drawMeterForeground() {\n    context.save();\n    context.lineWidth = options.borderWidth;\n    context.strokeStyle = options.foregroundColor;\n    context.beginPath();\n    context.arc(options.size / 2, options.size / 2, getMeterRadius() / 2 - options.borderWidth / 2, 0, 2 * Math.PI);\n    context.closePath();\n    context.stroke();\n    context.restore();\n  }\n  /**\n   * draws the fluid contents of the meter\n   * @param  {} dt elapsed time since last frame\n   */\n  function drawFluid(dt) {\n    context.save();\n    context.arc(options.size / 2, options.size / 2, getMeterRadius() / 2 - options.borderWidth, 0, Math.PI * 2);\n    context.clip();\n    drawFluidLayer(backgroundFluidLayer, dt);\n    drawFluidLayer(foregroundFluidLayer, dt);\n    if (options.drawBubbles) {\n      drawFluidMask(foregroundFluidLayer, dt);\n      drawBubblesLayer(dt);\n    }\n    context.restore();\n  }\n\n\n  /**\n   * draws the foreground fluid layer\n   * @param  {} dt elapsed time since last frame\n   */\n  function drawFluidLayer(layer, dt) {\n    // calculate wave angle\n    if (layer.angularSpeed > 0) {\n      layer.angle += layer.angularSpeed * dt;\n      layer.angle = layer.angle < 0 ? layer.angle + 360 : layer.angle;\n    }\n\n    // calculate horizontal position\n    layer.horizontalPosition += layer.horizontalSpeed * dt;\n    if (layer.horizontalSpeed > 0) {\n      layer.horizontalPosition > Math.pow(2, 53) ? 0 : layer.horizontalPosition;\n    }\n    else if (layer.horizontalPosition < 0) {\n      layer.horizontalPosition < -1 * Math.pow(2, 53) ? 0 : layer.horizontalPosition;\n    }\n\n    var x = 0;\n    var y = 0;\n    var amplitude = layer.maxAmplitude * Math.sin(layer.angle * Math.PI / 180);\n\n    var meterBottom = (options.size - (options.size - getMeterRadius()) / 2) - options.borderWidth;\n    var fluidAmount = currentFillPercentage * (getMeterRadius() - options.borderWidth * 2) / 100;\n\n    if (currentFillPercentage < fillPercentage) {\n      currentFillPercentage += 15 * dt;\n    } else if (currentFillPercentage > fillPercentage) {\n      currentFillPercentage -= 15 * dt;\n    }\n\n    layer.initialHeight = meterBottom - fluidAmount;\n\n    context.save();\n    context.beginPath();\n\n    context.lineTo(0, layer.initialHeight);\n\n    while (x < options.size) {\n      y = layer.initialHeight + amplitude * Math.sin((x + layer.horizontalPosition) / layer.frequency);\n      context.lineTo(x, y);\n      x++;\n    }\n\n    context.lineTo(x, options.size);\n    context.lineTo(0, options.size);\n    context.closePath();\n\n    context.fillStyle = layer.fillStyle;\n    context.fill();\n    context.restore();\n  }\n\n  /**\n   * clipping mask for objects within the fluid constrains\n   * @param {Object} layer layer to be used as a mask\n   */\n  function drawFluidMask(layer) {\n    var x = 0;\n    var y = 0;\n    var amplitude = layer.maxAmplitude * Math.sin(layer.angle * Math.PI / 180);\n\n    context.beginPath();\n\n    context.lineTo(0, layer.initialHeight);\n\n    while (x < options.size) {\n      y = layer.initialHeight + amplitude * Math.sin((x + layer.horizontalPosition) / layer.frequency);\n      context.lineTo(x, y);\n      x++;\n    }\n    context.lineTo(x, options.size);\n    context.lineTo(0, options.size);\n    context.closePath();\n    context.clip();\n  }\n\n  function drawBubblesLayer(dt) {\n    context.save();\n    for (var i = 0; i < bubblesLayer.bubbles.length; i++) {\n      var bubble = bubblesLayer.bubbles[i];\n\n      context.beginPath();\n      context.strokeStyle = 'white';\n      context.arc(bubble.x, bubble.y, bubble.r, 2 * Math.PI, false);\n      context.stroke();\n      context.closePath();\n\n      var currentSpeed = bubblesLayer.current * dt;\n\n      bubble.velX = Math.abs(bubble.velX) < Math.abs(bubblesLayer.current) ? bubble.velX + currentSpeed : bubblesLayer.current;\n      bubble.y = bubble.y - bubble.velY * dt;\n      bubble.x = bubble.x + (bubblesLayer.swing ? 0.4 * Math.cos(bubblesLayer.swing += 0.03) * bubblesLayer.swing : 0) + bubble.velX * 0.5;\n\n      // determine if current bubble is outside the safe area\n      var meterBottom = (options.size - (options.size - getMeterRadius()) / 2) - options.borderWidth;\n      var fluidAmount = currentFillPercentage * (getMeterRadius() - options.borderWidth * 2) / 100;\n\n      if (bubble.y <= meterBottom - fluidAmount) {\n        bubblesLayer.reset(bubble);\n      }\n\n    }\n    context.restore();\n  }\n\n  function drawText() {\n    var settings = self.ctx.settings;\n    text =  valueText.toFixed(0);\n    if (settings.unit != undefined)\n        text =  valueText.toFixed(0)  + \" \"+ settings.unit;\n\n    context.save();\n    context.font = getFontSize();\n    context.fillStyle = options.fontFillStyle;\n    context.textAlign = \"center\";\n    context.textBaseline = 'middle';\n    context.filter = \"drop-shadow(0px 0px 5px rgba(0,0,0,0.4))\"\n    context.fillText(text, options.size / 2, options.size / 2);\n    context.restore();\n  }\n\n  //#region helper methods\n  function clamp(number, min, max) {\n    return Math.min(Math.max(number, min), max);\n  };\n  function getMeterRadius() {\n    return options.size * 0.9;\n  }\n\n  function random(min, max) {\n    var delta = max - min;\n    return max === min ? min : Math.random() * delta + min;\n  }\n\n  function getFontSize() {\n    return options.fontSize + \" \" + options.fontFamily;\n  }\n  //#endregion\n\n  return {\n    init: function (env) {\n      if (!env.targetContainer)\n        throw \"empty or invalid container\";\n\n      targetContainer = env.targetContainer;\n      fillPercentage = clamp(env.fillPercentage, 0, 100);\n\n      if (env.options) {\n        options.drawShadow = env.options.drawShadow === false ? false : true;\n        options.size = env.options.size;\n        options.drawBubbles = env.options.drawBubbles === false ? false : true;\n        options.borderWidth = env.options.borderWidth || options.borderWidth;\n        options.foregroundFluidColor = env.options.foregroundFluidColor || options.foregroundFluidColor;\n        options.backgroundFluidColor = env.options.backgroundFluidColor || options.backgroundFluidColor;\n        options.backgroundColor = env.options.backgroundColor || options.backgroundColor;\n        options.foregroundColor = env.options.foregroundColor || options.foregroundColor;\n\n        options.drawText = env.options.drawText === false ? false : true;\n        options.drawPercentageSign = env.options.drawPercentageSign === false ? false : true;\n        options.fontSize = env.options.fontSize || options.fontSize;\n        options.fontFamily = env.options.fontFamily || options.fontFamily;\n        options.fontFillStyle = env.options.fontFillStyle || options.fontFillStyle;\n        // fluid settings\n\n        if (env.options.foregroundFluidLayer) {\n          foregroundFluidLayer.fillStyle = env.options.foregroundFluidLayer.fillStyle || foregroundFluidLayer.fillStyle;\n          foregroundFluidLayer.angularSpeed = env.options.foregroundFluidLayer.angularSpeed || foregroundFluidLayer.angularSpeed;\n          foregroundFluidLayer.maxAmplitude = env.options.foregroundFluidLayer.maxAmplitude || foregroundFluidLayer.maxAmplitude;\n          foregroundFluidLayer.frequency = env.options.foregroundFluidLayer.frequency || foregroundFluidLayer.frequency;\n          foregroundFluidLayer.horizontalSpeed = env.options.foregroundFluidLayer.horizontalSpeed || foregroundFluidLayer.horizontalSpeed;\n        }\n\n        if (env.options.backgroundFluidLayer) {\n          backgroundFluidLayer.fillStyle = env.options.backgroundFluidLayer.fillStyle || backgroundFluidLayer.fillStyle;\n          backgroundFluidLayer.angularSpeed = env.options.backgroundFluidLayer.angularSpeed || backgroundFluidLayer.angularSpeed;\n          backgroundFluidLayer.maxAmplitude = env.options.backgroundFluidLayer.maxAmplitude || backgroundFluidLayer.maxAmplitude;\n          backgroundFluidLayer.frequency = env.options.backgroundFluidLayer.frequency || backgroundFluidLayer.frequency;\n          backgroundFluidLayer.horizontalSpeed = env.options.backgroundFluidLayer.horizontalSpeed || backgroundFluidLayer.horizontalSpeed;\n        }\n      }\n\n\n\n      bubblesLayer.init();\n      setupCanvas();\n      draw();\n    },\n    setPercentage(percentage, value) {\n\n      fillPercentage = clamp(percentage, 0, 100);\n      valueText = value;\n    }\n  }\n};\n\n\n\n\n\n\n\nself.onInit = function() {\n  var settings = self.ctx.settings;\n\n\n\n\n    \n    self.onResize();\n\n}\n\nself.onDataUpdated = function() {\n  var settings = self.ctx.settings;\n    var value = 0;\n    \n    if (self.ctx.defaultSubscription.data.length > 0)\n    {\n        \n        if (self.ctx.defaultSubscription.data[0].data.length > 0)\n        value = self.ctx.defaultSubscription.data[0].data[0][1];\n        if (settings.maxValue > 0)\n            fm3.setPercentage((value / settings.maxValue) * 100, parseFloat(value));\n        else\n            fm3.setPercentage(value, parseFloat(value));\n      \n        }\n    \n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n}\n var fm3 = new FluidMeter();\nself.onResize = function() {\n    var settings = self.ctx.settings;\n    let fillColorForeground = \"#16E1FF\"\n    let fillColorBackground = \"#4F8FC6\"\n    if (settings.colorScheme == 'green')\n    {\n        fillColorForeground = \"#55DD10\";\n        fillColorBackground = \"#CDDD10\"\n    }\n    if (settings.colorScheme == 'purple')\n    {\n        fillColorForeground = \"purple\";\n        fillColorBackground = \"pink\"\n    }\n    \n    let size = self.ctx.width;\n    if (self.ctx.height < self.ctx.width)\n        size = self.ctx.height;\n    \n    console.log($(\"#fluid-meter-3\", self.ctx.$container))\n    \n    $(\"#fluid-meter-3\", self.ctx.$container)[0].innerHTML = \"\";\n    fm3 = new FluidMeter();\n   fm3.init({\n  targetContainer: document.getElementById(\"fluid-meter-3\"),\n  fillPercentage: 0,\n  options: {\n    fontSize: \"30px\",\n    drawPercentageSign: false,\n    drawBubbles: true,\n    size: size,\n    borderWidth: 19,\n    backgroundColor: settings.backgroundColor,\n    foregroundColor: \"#fafafa\",\n    foregroundFluidLayer: {\n      fillStyle: fillColorForeground,\n      angularSpeed: 30,\n      maxAmplitude: 10,\n      frequency: 30,\n      horizontalSpeed: -20\n    },\n    backgroundFluidLayer: {\n      fillStyle: fillColorBackground,\n      angularSpeed: 100,\n      maxAmplitude: 3,\n      frequency: 22,\n      horizontalSpeed: 20\n    }\n  }\n});\n    let value = 0;\n  console.log (self.ctx);\nif (self.ctx.defaultSubscription.data.length > 0)\n    {\n        \n        if (self.ctx.defaultSubscription.data[0].data.length > 0)\n        value = self.ctx.defaultSubscription.data[0].data[0][1];\n        if (settings.maxValue > 0)\n            fm3.setPercentage((value / settings.maxValue) * 100, parseFloat(value));\n        else\n            fm3.setPercentage(value, parseFloat(value));\n      \n        }\n\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"maxValue\": {\n                \"title\": \"Maximum Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"unit\": {\n                \"title\": \"Unit\",\n                \"type\": \"string\",\n                \"default\": \"%\"\n            },\n            \"colorScheme\": {\n                            \"title\": \"Color Scheme\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"blue\",\n                                \"green\",\n                                \"purple\"],\n                            \"default\": \"blue\"\n                        },\n            \"backgroundColor\": {\n                \"title\": \"Background Color\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            }\n        },\n        \"required\": [\"maxValue\", \"colorScheme\"]\n    },\n    \"form\": [\n        \"maxValue\",\n        \"unit\",\n        \"colorScheme\",\n        {\n            \"key\": \"backgroundColor\",\n            \"type\": \"color\",\n            \"default\":\"#e2e2e2\"\n        }\n        \n            ]\n        \n    \n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = Math.random() * 200;\\n\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"colorScheme\":\"blue\",\"maxValue\":200,\"unit\":\"l\",\"backgroundColor\":\"#eaeaea\"},\"title\":\"fluid level 1\"}"
      }
    },
    {
      "alias": "doube_slider2",
      "name": "Double Slider",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 9.5,
        "sizeY": 12,
        "resources": [
          {
            "url": "//cdn.bootcss.com/noUiSlider/8.5.1/nouislider.min.css",
            "isModule": false
          },
          {
            "url": "//cdn.bootcss.com/noUiSlider/8.5.1/nouislider.js",
            "isModule": false
          }
        ],
        "templateHtml": "<div class=\"slider\"></div>\n",
        "templateCss": "#container {\n  padding: 20px;\n}\n\n.slider {\n    margin-right: 40px\n}\n\n.noUi-tooltip {\n    display: none;\n}\n.noUi-active .noUi-tooltip {\n    display: block;\n}\n\n.noUi-connect {\n\tbackground: red;\n}\n\n\n",
        "controllerScript": "self.onInit = function() {\n    container = self.ctx.$container;\n    var scope = self.ctx.$scope;\n    var settings = self.ctx.settings;\n    var sliderColor = settings.sliderBackgroundColor || tinycolor('green').lighten(2).toRgbString();\n    var orientation = 'horizontal';\n    if (settings.orientation == \"1\")\n    {\n        orientation = 'vertical';\n        $('.slider', self.ctx.$container)[0].style.height = (parseInt((self.ctx.height), 10)-15)+'px' ;\n        $('.slider', self.ctx.$container)[0].style.marginLeft = (parseInt((self.ctx.width), 10) / 2 -30) + 'px';\n        $('.slider', self.ctx.$container)[0].style.marginTop = '-20px';\n    }\n    else\n    {\n        $('.slider', self.ctx.$container)[0].style.marginLeft = '0px';\n        //Align Slider in to the middle of the container\n\n        $('.slider', self.ctx.$container)[0].style.marginTop = (parseInt((self.ctx.height), 10) / 2 -30) + 'px';\n    }\n    \n    \n    \n    \n    var slider = $('.slider', self.ctx.$container);\n    noUiSlider.create(slider[0], {\n\t    start: [settings.sliderInitMinValue || 20, settings.sliderInitMaxValue || 25],\n\t    tooltips: [true,true],\n\t    range: { min: settings.sliderMinValue || 0, max: settings.sliderMaxValue || 100 },\n\t    orientation: orientation,\n        step: settings.sliderStepWidth || 1,\n        connect: true\n    });\n    \n    slider[0].noUiSlider.on('change.one', sliderValueChanged);\n\n    function sliderValueChanged(values, handle, unencoded, tap, positions, noUiSlider) \n    {\n        var method = settings.sliderMaxChangeRequestMethod;\n        \n        //Get the Handle which has been used\n        if (handle === 0)\n            method = settings.sliderMinChangeRequestMethod;\n        var paramsBody = values[handle];\n        \n        \n       \n        self.ctx.controlApi.sendTwoWayCommand(method, \n                                    paramsBody, scope.requestTimeout)\n                    .subscribe(\n                        function success(responseBody) {\n                            \n                        }\n                    );\n    }\n    \n    \n    \n    $('.noUi-connect', self.ctx.$container)[0].style.background = sliderColor;\n\n    if (!settings.sliderHideTooltip)\n    {\n        document.getElementsByClassName('noUi-tooltip')[0].style.display = \"block\";\n        document.getElementsByClassName('noUi-tooltip')[1].style.display = \"block\";\n    }\n    \n    function requestMaxStatus() {\n        method = settings.sliderMaxStatusRequestMethod;\n        paramsBody = \"\";\n        self.ctx.controlApi.sendTwoWayCommand(method, \n                            paramsBody, \n                            scope.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                       slider[0].noUiSlider.set( [null,parseFloat(responseBody)]);            \n                    }\n                    );\n                }\n                \n    function requestMinStatus() {\n        method = settings.sliderMinStatusRequestMethod;\n        paramsBody = \"\";\n        self.ctx.controlApi.sendTwoWayCommand(method, \n                            paramsBody, \n                            scope.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                       slider[0].noUiSlider.set([parseFloat(responseBody), null]);\n                       \n                    }\n                    )\n                }\n                \n                \n    requestMaxStatus()\n    requestMinStatus()\n}\n\n\n\n\nself.onResize = function() {\n    var settings = self.ctx.settings;\n    var orientation = 'horizontal';\n    if (settings.orientation == \"1\")\n    {\n        orientation = 'vertical';\n        $('.slider', self.ctx.$container)[0].style.height = (parseInt((self.ctx.height), 10)-15)+'px' ;\n        $('.slider', self.ctx.$container)[0].style.marginLeft = (parseInt((self.ctx.width), 10) / 2 -30) + 'px';\n        $('.slider', self.ctx.$container)[0].style.marginTop = '-20px';\n    }\n    else\n    {\n        $('.slider', self.ctx.$container)[0].style.marginLeft = '0px';\n        //Align Slider in to the middle of the container\n\n        $('.slider', self.ctx.$container)[0].style.marginTop = (parseInt((self.ctx.height), 10) / 2 -30) + 'px';\n    }\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n           \n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"sliderBackgroundColor\": {\n                \"title\": \"Slider background color\",\n                \"type\": \"string\",\n                \"default\": \"#008a00\"\n            },\n            \"sliderHideTooltip\": {\n                \"title\": \"Slider hide tooltip\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"sliderStepWidth\": {\n                \"title\": \"Slider step width\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n            \"sliderMinValue\": {\n                \"title\": \"Slider min. Value\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n            \"sliderMaxValue\": {\n                \"title\": \"Slider max. Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"sliderInitMinValue\": {\n                \"title\": \"Slider initialization min. Value\",\n                \"type\": \"number\",\n                \"default\": 20\n            },\n            \"sliderInitMaxValue\": {\n                \"title\": \"Slider initialization max. Value\",\n                \"type\": \"number\",\n                \"default\": 25\n            },\n            \"orientation\": {\n                \"title\": \"Orientation\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"0\",\n                    \"1\"],\n                \"default\": \"0\"\n            },\n            \"sliderMaxChangeRequestMethod\": {\n                \"title\": \"Change request max. Value Method\",\n                \"type\": \"string\",\n                \"default\": \"setTempertureOFFThreshold\"\n            },\n            \"sliderMaxStatusRequestMethod\": {\n                \"title\": \"Status request max. Value Method\",\n                \"type\": \"string\",\n                \"default\": \"getTempertureOFFThreshold\"\n            },\n            \"sliderMinChangeRequestMethod\": {\n                \"title\": \"Change request min. Value Method\",\n                \"type\": \"string\",\n                \"default\": \"setTempertureONThreshold\"\n            },\n            \"sliderMinStatusRequestMethod\": {\n                \"title\": \"Status request min. Value Method\",\n                \"type\": \"string\",\n                \"default\": \"getTempertureONThreshold\"\n            }\n        },\n        \"required\": [\n                     \"requestTimeout\",\n                     \"sliderHideTooltip\",\n                     \"sliderMinValue\",\n                     \"sliderMaxValue\",\n                     \"sliderInitMinValue\",\n                     \"sliderMaxValue\",\n                     \"sliderStepWidth\",\n                     \"sliderBackgroundColor\",\n                     \"orientation\",\n                     \"sliderMaxChangeRequestMethod\",\n                     \"sliderMaxStatusRequestMethod\",\n                     \"sliderMinChangeRequestMethod\",\n                     \"sliderMinStatusRequestMethod\"\n                     ]\n    },\n    \"form\": [\n        \"requestTimeout\",\n        \"sliderHideTooltip\",\n        \"sliderMinValue\",\n        \"sliderMaxValue\",\n        \"sliderInitMinValue\",\n        \"sliderInitMaxValue\",\n        \"sliderStepWidth\",\n        {\n            \"key\": \"sliderBackgroundColor\",\n            \"type\": \"color\"\n        },\n        {\n            \"key\": \"orientation\",\n            \"type\": \"select\",\n            \"titleMap\": [{\n                \"value\": \"0\",\n                \"name\": \"Horizontal\"\n            },\n            {\n                \"value\": \"1\",\n                \"name\": \"Vertical\"\n            }]\n        },\n        \"sliderMaxChangeRequestMethod\",\n         \"sliderMaxStatusRequestMethod\",\n         \"sliderMinChangeRequestMethod\",\n         \"sliderMinStatusRequestMethod\"\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"requestTimeout\":500,\"sliderHideTooltip\":true,\"sliderMinValue\":1,\"sliderMaxValue\":100,\"sliderInitMinValue\":20,\"sliderInitMaxValue\":25,\"sliderStepWidth\":1,\"sliderBackgroundColor\":\"#4a148c\",\"sliderMaxChangeRequestMethod\":\"setTempertureONThreshold\",\"sliderMaxStatusRequestMethod\":\"getTempertureONThreshold\",\"sliderMinChangeRequestMethod\":\"setTempertureOFFThreshold\",\"sliderMinStatusRequestMethod\":\"getTempertureOFFThreshold\",\"orientation\":\"1\"},\"title\":\"Double Slider\",\"showTitleIcon\":true,\"titleIcon\":\"more_horiz\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"eeee\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "gauge_1",
      "name": "Gauge 1",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9,
        "sizeY": 8,
        "resources": [
          {
            "url": "https://www.gstatic.com/charts/loader.js"
          }
        ],
        "templateHtml": "\r\n       <div id=\"chart_div\"></div>",
        "templateCss": "\n#container{\n\n}\n\n#chart_div {\n\n      display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n \n}",
        "controllerScript": "var data;\nvar options;\nvar chart;\nself.onInit = function() {\n    var settings = self.ctx.settings;\n      google.charts.load('current', {'packages':['gauge']});\n      google.charts.setOnLoadCallback(drawChart);\n\n      function drawChart() {\n\n        data = google.visualization.arrayToDataTable([\n          ['Label', 'Value'],\n          [settings.description || \"Temp.\", 0]\n        ]);\n\n        options = {\n          width: self.ctx.width, height: self.ctx.height,\n          min: settings.minValue || 0, max: settings.maxValue,\n          greenFrom: settings.greenStart, greenTo: settings.greenEnd,\n          redFrom: settings.redStart, redTo: settings.redEnd,\n          yellowFrom:settings.yellowStart, yellowTo: settings.yellowEnd,\n          minorTicks: 5\n        };\n\n        chart = new google.visualization.Gauge($('#chart_div', self.ctx.$container)[0]);\n\n        chart.draw(data, options);\n        \n        self.onDataUpdated();\n\n        \n      }\n}\n\nself.onDataUpdated = function() {\n    var settings = self.ctx.settings;\n    var value = 0;\n    console.log (self.ctx);\n    \n    if (self.ctx.data.length > 0)\n    {\n        \n        if (self.ctx.data[0].data.length > 0)\n        value = self.ctx.data[0].data[0][1];\n        console.log (value);\n\n      \n        }\n    \n        \n        if (data !=undefined)\n        {\n            console.log (value);\n            data.setValue(0, 1, value);\n            chart.draw(data, options);\n        }\n}\n\nself.onResize = function() {\n    //if (options != undefined)\n    //{\n    //options.width = self.ctx.width;\n    //options.height = self.ctx.height;\n    //}\n    //$('#chart_div', self.ctx.$container)[0].style.marginLeft = -200 + self.ctx.width/2 + \"px\";\n    \n    \n    //if (chart != undefined)\n   //chart.draw(data, options);\n   self.onInit();\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"description\": {\n                \"title\": \"Description\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"maxValue\": {\n                \"title\": \"Maximum Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"minValue\": {\n                \"title\": \"Minimum Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"greenStart\": {\n                \"title\": \"Start green area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"greenEnd\": {\n                \"title\": \"End green area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"yellowStart\": {\n                \"title\": \"Start Yellow area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"yellowEnd\": {\n                \"title\": \"End Yellow area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"redStart\": {\n                \"title\": \"Start Red area\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"redEnd\": {\n                \"title\": \"End Red area\",\n                \"type\": \"number\",\n                \"default\": 0\n            }\n            \n        },\n        \"required\": [\"maxValue\"]\n    },\n    \"form\": [\n        \"description\",\n        \"maxValue\",\n        \"minValue\",\n        \"greenStart\",\n        \"greenEnd\",\n        \"yellowStart\",\n        \"yellowEnd\",\n        \"redStart\",\n        \"redEnd\"\n            ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = Math.random() * 100;\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Gauge 1\"}"
      }
    },
    {
      "alias": "fluid_level_2",
      "name": "fluid level 2",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 6.5,
        "resources": [
          {
            "url": "//sre-solutions.com/static/tb-widget/industrial.css"
          },
          {
            "url": "//sre-solutions.com/static/tb-widget/industrial.js"
          }
        ],
        "templateHtml": "<div class=\"industrial tank size two\" >\r\n    <span class=\"ticks\" data-amount=\"4\" data-scale-freq=\"1\" data-height=\"4\"></span>\r\n    <div class=\"space\"></div>\r\n    <div class=\"meter\"></div>\r\n</div>",
        "templateCss": ".industrial\n{\n    top: 50%;\n     transform: translate(-50%, -50%);\n    position: absolute;\n  left: 50%;\n}",
        "controllerScript": "self.onInit = function() {\n    var settings = self.ctx.settings;\n     \n    $('.industrial', self.ctx.$container).each(function() {\n                $(this).industrial({\n                    default_value: true,\n                    low: settings.minValue, \n                    high: settings.maxValue,\n                    tick_scale: true, \n                    tick_scale_frequency: 1,\n                    tick_amount: settings.numberOfTicks,\n                    tick_height: 2,\n                    digit_amount: 4   \n            });\n    });\n}\n\nself.onDataUpdated = function() {\n    var settings = self.ctx.settings;\n    var value = 0;\n    \n    if (self.ctx.defaultSubscription.data.length > 0)\n    {\n        \n        if (self.ctx.defaultSubscription.data[0].data.length > 0)\n        value = self.ctx.defaultSubscription.data[0].data[0][1];\n\n      \n        }\n    \n    \n  $('.industrial', self.ctx.$container).each(function() {\n            $(this).industrial(parseFloat(value));\n  });\n    \n    \n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n}\n\nself.onResize = function() {\n  \n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"maxValue\": {\n                \"title\": \"Maximum Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"minValue\": {\n                \"title\": \"Minimum Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"numberOfTicks\": {\n                \"title\": \"Unit\",\n                \"type\": \"number\",\n                \"default\": 0\n            }\n        },\n        \"required\": [\"maxValue\", \"minValue\", \"numberOfTicks\"]\n    },\n    \"form\": [\n        \"maxValue\",\n        \"minValue\",\n        \"numberOfTicks\"\n        \n        \n            ]\n        \n    \n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = Math.random() * 100;\\n\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"fluid level 2\"}"
      }
    },
    {
      "alias": "gauge1",
      "name": "Gauge 2",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 8,
        "sizeY": 8,
        "resources": [
          {
            "url": "https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.4/chartist.min.js"
          },
          {
            "url": "https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css"
          },
          {
            "url": "https://cdn.jsdelivr.net/npm/chartist-plugin-fill-donut@0.1.4/dist/chartist-plugin-fill-donut.min.js"
          },
          {
            "url": "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
          }
        ],
        "templateHtml": "<div class=\"ct-gauge\">\n    <span id=\"value\">160 mph</span>\n</div>\n",
        "templateCss": "#container {\n    overflow: auto;\n}\n .ct-gauge{\n     width: 100%;\n     height: 100%;\n }\n \n #value{\n    position: absolute;\n    top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n }\n \n  /*make a color different to fill-donut series*/\n    .ct-chart-donut .ct-series-a .ct-slice-donut {\n        stroke: var(--stroke);\n    }\n    \n    /*make b hidden*/\n    .ct-chart-donut .ct-series-b .ct-slice-donut {\n        stroke: #efefef;\n        opacity: 0.0;\n    }\n    /*make all fill-donut series visible and set color*/\n    .ct-chart-donut .ct-fill-donut .ct-slice-donut{\n        stroke: #efefef;\n        opacity: 1;\n    }\n    \n    ",
        "controllerScript": "var chart;\n\nself.onInit = function() {\nvar settings = self.ctx.settings;\n\n\nself.ctx.$container[0].style.setProperty('--stroke', settings.color);\n\n\n/*    // Your CSS as text\nvar styles = '#' + self.ctx.$container[0].id.toString() + ` \n.ct-chart-donut .ct-series-a .ct-slice-donut {\n        stroke: #00ff04;\n    }\n`\n\nconsole.log (self.ctx.$container[0]);\n\nif (settings.color != null)\n{\n    styles = styles.replace('#00ff04', settings.color);\n  \nvar styleSheet = document.createElement(\"style\")fa-solid \nstyleSheet.type = \"text/css\"\nstyleSheet.innerText = styles\ndocument.head.appendChild(styleSheet)\n}\n*/\n    \n    \n    \nvar icon = \"fas fa-chart-line\";\nif (settings.icon != null)\n    icon = settings.icon;\n    \nconsole.log(icon)\n    \n\nchart = new Chartist.Pie($('.ct-gauge', self.ctx.$container)[0], \n    {\n        series: [160, 60 ],\n        labels: ['', '']\n    }, {\n        donut: true,\n        donutWidth: settings.donutWidth,\n        startAngle: 210,\n        total: 260,\n        showLabel: false,\n        plugins: [\n            Chartist.plugins.fillDonut({\n                items: [{\n                    content: '<i class=\"'+ icon + '\"></i>',\n                    position: 'center',\n                    offsetY : 80,\n                    offsetX: 0\n                }, {\n                    content: ''\n                }]\n            })\n        ],\n    });\n    \n    \n    \n//chart.svg._node.setAttribute('style','stroke: blue' );\nchart.on('draw', function(data) {\n\n    \n    \n    \n    \n    if(data.type === 'slice' && data.index == 0) {\n        // Get the total path length in order to use for dash array animation\n        var pathLength = data.element._node.getTotalLength();\n\n        // Set a dasharray that matches the path length as prerequisite to animate dashoffset\n        data.element.attr({\n            'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'\n        });\n\n        // Create animation definition while also assigning an ID to the animation for later sync usage\n        var animationDefinition = {\n            'stroke-dashoffset': {\n                id: 'anim' + data.index,\n                dur: 1200,\n                from: -pathLength + 'px',\n                to:  '0px',\n                easing: Chartist.Svg.Easing.easeOutQuint,\n                fill: 'freeze'\n            }\n        };\n\n        // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us\n        data.element.attr({\n            'stroke-dashoffset': -pathLength + 'px'\n        });\n\n        // We can't use guided mode as the animations need to rely on setting begin manually\n        // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate\n        data.element.animate(animationDefinition, true);\n    }\n    \n    \n    \n    \n    \n});\n \n    \n    self.onResize();\n}\n\nself.onDataUpdated = function() {\n    var settings = self.ctx.settings;\n  var series = Array();\n \n        var datasourceData = self.ctx.data[0];\n        var dataSet = datasourceData.data;\n     if (dataSet.length > 0)\n     {\n            var tsValuePair = dataSet[0];\n            if (tsValuePair.length > 0)\n            {\n            var value = tsValuePair[1];\n            if (value > settings.maxValue)\n                value = settings.maxValue;\n            if (value < settings.minValue)\n                value = settings.minValue;\n                \n            var span =     (settings.maxValue - settings.minValue );\n            var multiplier = 220 / span;\n            \n            seriesElement = [(value - settings.minValue) * multiplier  , 220-((value -settings.minValue) * multiplier)];\n            //chart.container.innerText = value;\n            $('#value', self.ctx.$container)[0].innerHTML = Number.parseFloat(value).toFixed(2) + ' ' + settings.unit;\n            chart.series = seriesElement;\n            chart.update(chart);\n        }\n}\n\n    \n        \n        \n}\n\nself.onResize = function() {\n   \n    if (self.ctx.width > (self.ctx.height - 50))\n    {\n        $('.ct-gauge', self.ctx.$container)[0].style.zoom = self.ctx.height / 200;\n    }\n    else\n    {\n        $('.ct-gauge', self.ctx.$container)[0].style.zoom = self.ctx.width / 200;\n    }\n   \n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"minValue\": {\n                \"title\": \"Min. Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"maxValue\": {\n                \"title\": \"Max. Value\",\n                \"type\": \"number\",\n                \"default\": 220\n            },\n             \n            \"donutWidth\": {\n                \"title\": \"Donut Width\",\n                \"type\": \"number\",\n                \"default\": 20\n            },\n            \n            \"unit\": {\n                \"title\": \"Unit\",\n                \"type\": \"string\",\n                \"default\": \"°C\"\n            },\n            \"color\": {\n                \"title\": \"Color\",\n                \"type\": \"string\",\n                \"default\": \"red\"\n            },\n            \"icon\": {\n                \"title\": \"Font awesome icon\",\n                \"type\": \"string\",\n                \"default\": \"fa fa-tachometer\"\n            }\n            \n        },\n            \n            \n        \"required\": [ \n                    \"minValue\",\n                    \"maxValue\",\n                    \"donutWidth\",\n                    \"unit\"\n                    ]\n    },\n    \"form\": [\n        \"minValue\",\n        \"maxValue\",\n        \"donutWidth\",\n        \"unit\",\n        {\n            \"key\": \"color\",\n            \"type\": \"color\"\n        },\n        \"icon\"\n            ]\n    }\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value =  Math.random() * 220;\\n\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"donutWidth\":30,\"unit\":\" °C\",\"maxValue\":220,\"minValue\":0,\"color\":\"#00ff00\",\"icon\":\"fas fa-thermometer-full\"},\"title\":\"Gauge 2\"}"
      }
    },
    {
      "alias": "gauge_3",
      "name": "Gauge 3",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 8,
        "resources": [
          {
            "url": "https://bernii.github.io/gauge.js/dist/gauge.min.js"
          }
        ],
        "templateHtml": "<div id=\"preview\">\n\n<div id=\"preview-textfield\" style=\"font-size: 35px;\">1,250</div>\n<canvas id=\"my-gauge\"></canvas>\n</div>",
        "templateCss": "#container {\n    \n}\n#preview-textfield{\n top: 65px; left: 0; right: 0;\n  text-align: center; font-size: 2em; font-weight: bold;\n  color: black; font-family: 'Amaranth', sans-serif;\n}\n\n#my-gauge{\ntop: 50%;\n     transform:translate(-50%, -50%);\n     \n    position: absolute;\n  left: 50%;\n}",
        "controllerScript": "var canvasElement;\nvar gauge;\n\nself.onInit = function() {\n    settings = self.ctx.settings;\n    \n    \n    var opts = {\n    angle: settings.angle/100 || 0, // The span of the gauge arc\n  lineWidth: settings.width || 0.4, // The line thickness\n  radiusScale: 1, // Relative radius\n  pointer: {\n    length: 0.6, // // Relative to gauge radius\n    strokeWidth: 0.035, // The thickness\n    color: '#000000' // Fill color\n  },\n  limitMax: false,     // If false, max value increases automatically if value > maxValue\n  limitMin: false,     // If true, the min value of the gauge will be fixed\n  colorStart: '#6FADCF',   // Colors\n  colorStop: '#8FC0DA',    // just experiment with them\n  strokeColor: '#E0E0E0',  // to see which ones work best for you\n  generateGradient: true,\n  highDpiSupport: true,     // High resolution support\n  percentColors: [[0.0, settings.startColor || \"#a9d70b\" ],  [1.0, settings.endColor || \"#ff0000\"]],\n  \n};\n    \n    canvasElement = $('#my-gauge', self.ctx.$container)[0];\n    gauge = new Gauge(canvasElement).setOptions(opts);;\n    gauge.minValue = settings.minValue||0; \n    gauge.maxValue = settings.maxValue||100; \n    gauge.animationSpeed = 16; \n    self.onResize();\n}\n\nself.onResize = function() {\n    \n    if (self.ctx.width < self.ctx.height+50)\n    $('#preview', self.ctx.$container)[0].style.zoom = self.ctx.width/290;\n    else\n    {\n    $('#preview', self.ctx.$container)[0].style.zoom = self.ctx.height/200;\n    $('#preview-textfield', self.ctx.$container)[0].style.width = $('#preview', self.ctx.$container)[0].style.width;\n    }\n\n\n    \n    \n    //canvasElement.width = self.ctx.width;\n    //canvasElement.height = self.ctx.height;\n    gauge.update(true);\n    gauge.render();\n}\n\nself.onDataUpdated = function() {\n    if (self.ctx.data.length > 0)\n    {\n        if (self.ctx.data[0].data.length > 0)\n        {\n    var value = self.ctx.data[0].data[0][1];\n    gauge.set(value);\n    $('#preview-textfield', self.ctx.$container)[0].innerText = value.toFixed(2) + ' ' + (settings.unit || '°C');\n        }\n    }\n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"maxValue\": {\n                \"title\": \"Maximum Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"minValue\": {\n                \"title\": \"Minimum Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"unit\": {\n                \"title\": \"Unit\",\n                \"type\": \"string\",\n                \"default\": \"°C\"\n            },\n            \"width\": {\n                \"title\": \"Gauge width\",\n                \"type\": \"number\",\n                \"default\": 0.4\n            },\n            \"startColor\": {\n                \"title\": \"Min. Color\",\n                \"type\": \"string\",\n                \"default\": \"#6FADCF\"\n            },\n            \"endColor\": {\n                \"title\": \"Max. Color\",\n                \"type\": \"string\",\n                \"default\": \"#8FC0DA\"\n            },\n            \"angle\": {\n                \"title\": \"Angle\",\n                \"type\": \"number\",\n                \"default\": 0\n            }\n            \n        },\n        \"required\": [\"maxValue\"]\n    },\n    \"form\": [\n        \"maxValue\",\n        \"minValue\",\n        \"unit\",\n        \"width\",\n        {\n            \"key\": \"startColor\",\n            \"type\": \"color\"\n        },\n        {\n            \"key\": \"endColor\",\n            \"type\": \"color\"\n        },\n        \"angle\"\n            ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = Math.random() * 100;\\n\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"maxValue\":100,\"width\":0.4,\"startColor\":\"#76f10f\",\"endColor\":\"#ff0000\"},\"title\":\"Gauge 3\"}"
      }
    },
    {
      "alias": "gauge_4",
      "name": "Gauge 4",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7,
        "sizeY": 7.5,
        "resources": [
          {
            "url": "https://cdn.jsdelivr.net/npm/echarts@5.2.2/dist/echarts.min.js"
          }
        ],
        "templateHtml": "<div id=\"echart\" style=\"width:500px; height:500px;\"></div>",
        "templateCss": "\n\n#echart\n{\n\n  margin-right: -55px;\n}",
        "controllerScript": "var gaugeData = [];\nself.onInit = function() {\n    \n    \n\n\nfor (var i = 0; i<self.ctx.data.length; i++)\n{\n    \n    let gaugeDataElement = {\n    \n\n    name: self.ctx.data[i].dataKey.label,\n    title: {\n      offsetCenter: [0+'%', -30+i*30+'%']\n    },\n    detail: {\n      valueAnimation: true,\n      offsetCenter: [0+'%', -20+i*30+'%']\n    }\n  }\n        \n    \n    gaugeData.push(gaugeDataElement);\n}\n\n    \n    draw();\n    self.onResize();\n}\nvar gaugeData = [];\nfunction draw()\n{\n    \nvar myChart = echarts.init($('#echart', self.ctx.$container)[0]);\n\n\nvar option;\n\n\n\n\n\n    /*var gaugeData = [\n  {\n    value: 20,\n    name: 'Perfect',\n    title: {\n      offsetCenter: ['0%', '-30%']\n    },\n    detail: {\n      valueAnimation: true,\n      offsetCenter: ['0%', '-20%']\n    }\n  },\n  {\n    value: 40,\n    name: 'Good',\n    title: {\n      offsetCenter: ['0%', '0%']\n    },\n    detail: {\n      valueAnimation: true,\n      offsetCenter: ['0%', '10%']\n    }\n  },\n  {\n    value: 60,\n    name: 'Commonly',\n    title: {\n      offsetCenter: ['0%', '30%']\n    },\n    detail: {\n      valueAnimation: true,\n      offsetCenter: ['0%', '40%']\n    }\n  }\n];*/\noption = {\n  series: [\n    {\n      type: 'gauge',\n      startAngle: 90,\n      endAngle: -270,\n      min: self.ctx.settings.minValue || 0,\n      max: self.ctx.settings.maxValue || 100,\n      pointer: {\n        show: false\n      },\n      progress: {\n        show: true,\n        overlap: false,\n        roundCap: true,\n        clip: false,\n        itemStyle: {\n          borderWidth: 1,\n          borderColor: '#464646'\n        }\n      },\n      axisLine: {\n        lineStyle: {\n          width: 40\n        }\n      },\n      splitLine: {\n        show: false,\n        distance: 0,\n        length: 10\n      },\n      axisTick: {\n        show: false\n      },\n      axisLabel: {\n        show: false,\n        distance: 50\n      },\n      data: gaugeData,\n      title: {\n        fontSize: 14\n      },\n      detail: {\n        width: 50,\n        height: 14,\n        fontSize: 14,\n        color: 'auto',\n        borderColor: 'auto',\n        borderRadius: 20,\n        borderWidth: 1,\n        formatter: '{value}' + ((self.ctx.settings.unitValue === undefined) ? '': self.ctx.settings.unitValue)\n      }\n    },\n  ]\n};\n/*setInterval(function () {\n  gaugeData[0].value = +(Math.random() * 100).toFixed(2);\n  gaugeData[1].value = +(Math.random() * 100).toFixed(2);\n  gaugeData[2].value = +(Math.random() * 100).toFixed(2);\n  myChart.setOption({\n    series: [\n      {\n        data: gaugeData,\n        pointer: {\n          show: false\n        }\n      }\n    ]\n  });\n}, 2000);*/\noption && myChart.setOption(option);\n}\n\nself.onDataUpdated = function() {\n   console.log(gaugeData);\n    for (var i = 0; i<self.ctx.data.length; i++)\n{\n    if (self.ctx.data[i].data[0] != undefined)\n    gaugeData[i].value = (self.ctx.data[i].data[0][1])\n   \n}\n\ndraw();\n\n    \n}\n\nself.onResize = function() {\n    if (self.ctx.width > self.ctx.height)\n        $('#echart', self.ctx.$container)[0].style.zoom = self.ctx.height/500;\n    else\n    $('#echart', self.ctx.$container)[0].style.zoom = self.ctx.width/500;\n    \n    self.ctx.detectChanges();\n     \n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"maxValue\": {\n                \"title\": \"Maximum Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"minValue\": {\n                \"title\": \"Minimum Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"unitValue\": {\n                \"title\": \"Unit\",\n                \"type\": \"string\",\n                \"default\": \"°C\"\n            }\n        },\n        \"required\": [\"maxValue\",\"unitValue\"]\n    },\n    \"form\": [\n        \"maxValue\",\n        \"minValue\",\n        \"unitValue\"\n       \n            ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 2\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.3800055415482756,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 3\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.28112084108124735,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"maxValue1\":100,\"unitValue1\":\"°C\",\"maxValue2\":100,\"unitValue2\":\"°C\",\"maxValue3\":100,\"unitValue3\":\"°C\"},\"title\":\"Gauge 4\"}"
      }
    },
    {
      "alias": "switch6",
      "name": "switch6",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 5,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "\r\n<div id=\"toggle_div\" class=\"toggle toggle_off\">\r\n  <input type=\"checkbox\" id=\"togglei\" />\r\n  <label for=\"toggle\"></label>\r\n</div>",
        "templateCss": "\n .toggle {\n\t position: absolute;\n\t top: 50%;\n\t left: 50%;\n\t transform: translate3d(-50%, -50%, 0);\n}\n .toggle:after {\n\t\n\t position: absolute;\n\t left: -56px;\n\t top: 30px;\n\t font-size: 18px;\n\t color: #fff;\n}\n .toggle:after {\n\n\t position: absolute;\n\t right: -46px;\n\t top: 30px;\n\t font-size: 18px;\n\t color: rgba(253, 15, 21, 0.31);\n}\n .toggle label {\n\t position: relative;\n\t display: inline-block;\n\t width: 80px;\n\t height: 80px;\n\t background-color: #fd1015;\n\t border-radius: 50px;\n\t cursor: pointer;\n\t box-shadow: inset 0 0 2px 1px rgba(0, 0, 0, 0.1), 0px 9px 15px 0px #ef4247;\n\t -webkit-tap-highlight-color: transparent;\n}\n .toggle label:before {\n\t content: \"\";\n\t position: absolute;\n\t top: 50%;\n\t left: 50%;\n\t transform: translate(-50%, -50%);\n\t transition: width 0.2s cubic-bezier(0, -1.85, 0.27, 1.75);\n\t height: 42px;\n\t width: 42px;\n\t background-color: #fd0f14;\n\t border-radius: 46px;\n\t box-shadow: inset 0px 0px 0px 8px #fff;\n}\n .toggle input {\n\t display: none;\n}\n .toggle_on input:checked + label {\n\t background-color: #57de72;\n\t box-shadow: inset 0 0 2px 1px rgba(0, 0, 0, 0.1), 0px 9px 15px 0px rgba(3, 132, 28, 0.5411764705882353);\n}\n .toggle_on input:checked + label:before {\n\t width: 10px;\n\t background-color: #fff;\n}\n \n \n ",
        "controllerScript": "//https://codepen.io/agoodwin/pen/JBvBPr\n\nfunction check(value)\n{\n    console.log('clicked');\n            let checkbox_checked = false;\n            if (!value) {\n                $('#togglei', self.ctx.$container).prop('checked', false);\n                \n                checkbox_checked = false;\n                $('#toggle_div', self.ctx.$container).removeClass('toggle_on');\n              $('#toggle_div', self.ctx.$container).addClass('toggle_off');\n            }\n            else\n            {\n                console.log('checked');\n                checkbox_checked = true;\n                $('#togglei', self.ctx.$container).prop('checked', true);\n               $('#toggle_div', self.ctx.$container).removeClass('toggle_off');\n                $('#toggle_div', self.ctx.$container).addClass('toggle_on');\n            }\n}\n\nself.onInit = function() {\n    \nvar settings = self.ctx.settings;\n\nself.onResize();\n    \n\n($('#toggle_div', self.ctx.$container)).click(\n        function() {\n            console.log('clicked');\n            let checkbox_checked = false;\n            if ($('#togglei', self.ctx.$container).prop('checked')) {\n                $('#togglei', self.ctx.$container).prop('checked', false);\n                \n                checkbox_checked = false;\n                $('#toggle_div', self.ctx.$container).removeClass('toggle_on');\n              $('#toggle_div', self.ctx.$container).addClass('toggle_off');\n            }\n            else\n            {\n                console.log('checked');\n                checkbox_checked = true;\n                $('#togglei', self.ctx.$container).prop('checked', true);\n               $('#toggle_div', self.ctx.$container).removeClass('toggle_off');\n                $('#toggle_div', self.ctx.$container).addClass('toggle_on');\n            }\n            \n            var method = settings\n                .changeRequestMethod || 'setValue';\n            var paramsBody = convertStatus(\n                checkbox_checked);\n\n\n            self.ctx.controlApi.sendOneWayCommand(\n                method,\n                paramsBody, settings\n                .requestTimeout)\n            \n        });\n\nvar convertStatusChangeMethod = settings\n        .convertStatusChangeMethod || \"return value;\";\n\n    var convertStatus = new Function(\"value\",\n        convertStatusChangeMethod);\n\n    //Get Value Method\n    var convertGetValueMethod = settings\n        .convertStatusRequestMethod ||\n        \"return data ? true : false;\";\n\n    var convertGetValue = new Function(\"data\",\n        convertGetValueMethod);\n\n    function requestStatus() {\n\n        method = settings.statusRequestMethod;\n        paramsBody = \"\";\n        self.ctx.controlApi.sendTwoWayCommand(method,\n                paramsBody,\n                settings.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                   \n\n                    let value = (convertGetValue(\n                        responseBody));\n                         console.log(value)\n\n                    if (value) {\n                        check(true)\n\n\n\n                    } else {\n                        check(false)\n                    }\n                }\n            );\n    }\n\n    if ((settings.retrieveValueMethod ==\n            \"Subscribe for attribute\") || (settings\n            .retrieveValueMethod ==\n            \"Subscribe for timeseries\")) {\n        var type = 'timeseries'\n        if (settings.retrieveValueMethod ==\n            \"Subscribe for attribute\")\n            type = 'attribute'\n\n\n        datasources = [{ // datasource\n                type: 'entity', // type of the datasource. Can be \"function\" or \"entity\"\n                name: 'name', // name of the datasource (in case of \"entity\" usually Entity name)\n                aliasName: self.ctx\n                    .defaultSubscription\n                    .targetDeviceName, // name of the alias used to resolve this particular datasource Entity\n                entityName: self.ctx\n                    .defaultSubscription\n                    .targetDeviceName, // name of the Entity used as datasource\n                entityType: 'DEVICE', // datasource Entity type (for ex. \"DEVICE\", \"ASSET\", \"TENANT\", etc.)\n                entityId: self.ctx\n                    .defaultSubscription\n                    .targetDeviceId, // entity identificator presented as string uuid. \n                dataKeys: [ //  array of keys (Array<DataKey>) (attributes or timeseries) of the entity used to fetch data \n                    { // dataKey\n                        name: settings\n                            .updateValueKey, // the name of the particular entity attribute/timeseries \n                        type: type, // type of the dataKey. Can be \"timeseries\", \"attribute\" or \"function\" \n                        label: settings\n                            .updateValueKey, // label of the dataKey. Used as display value (for ex. in the widget legend section) \n                        color: '#ffffff', // color of the key. Can be used by widget to set color of the key data (for ex. lines in line chart or segments in the pie chart).  \n                        funcBody: \"\", // only applicable for datasource with type \"function\" and \"function\" key type. Defines body of the function to generate simulated data.\n                        settings: {} // dataKey specific settings with structure according to the defined Data key settings json schema. See \"Settings schema section\".\n                    },\n                    //...\n                ]\n            },\n            //...\n        ]\n        console.log(datasources);\n\n        function subscribeForLabelPatternsSources(\n            datasources) {\n            const\n                labelPatternsSourcesSubscriptionOptions = {\n                    datasources,\n                    useDashboardTimewindow: false,\n                    type: 'latest',\n                    callbacks: {\n                        onDataUpdated: (\n                        subscription) => {\n\n                            let data = subscription\n                                .data[0].data[0][1];\n\n                            console.log(\n                                subscription)\n\n                            let value = (\n                                convertGetValue(\n                                    data));\n\n                            if (value === true) {\n                                console.log(\n                                \"check\");\n                                $('#toggle', self\n                                        .ctx\n                                        .$container)\n                                    .prop('checked',\n                                        true);\n\n                            } else {\n                                $('#toggle', self\n                                        .ctx\n                                        .$container)\n                                    .prop('checked',\n                                        false);\n                                console.log(\n                                    \"uncheck\");\n\n                            }\n                        }\n                    }\n                };\n\n            self.ctx.subscriptionApi.createSubscription(\n                labelPatternsSourcesSubscriptionOptions,\n                true).subscribe(\n                (subscription) => {\n                    //this.labelPatternsSourcesSubscription = subscription;\n                }\n            );\n        }\n        subscribeForLabelPatternsSources(datasources);\n    }\n\n    if (settings.retrieveValueMethod ==\n        'Call RPC get value method') {\n        requestStatus()\n    }\n            \n}\n\n\n\nself.onResize = function() {\n\n \n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"retrieveValueMethod\":\n            {\n                \"title\": \"Retrieve on/off value using method\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Don't retrieve\",\n                                \"Call RPC get value method\",\n                                \"Subscribe for attribute\",\n                                \"Subscribe for timeseries\"],\n                            \"default\": \"Call RPC get value method\"\n            },\n            \"updateValueKey\": {\n                \"title\": \"Attribute/Timeseries value key (only when subscribe for attribute/timeseries method)\",\n                \"type\": \"string\",\n                \"default\": \"value\"\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"statusRequestMethod\": {\n                \"title\": \"RPC get value method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            },\n            \"convertStatusChangeMethod\": {\n                \"title\": \"Convert value function, f(value), returns payload used by RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"return value;\"\n            },\n            \"convertStatusRequestMethod\": {\n                \"title\": \"Parse value function, f(data), returns boolean\",\n                \"type\": \"string\",\n                \"default\": \"return data ? true : false;\"\n            } \n            \n        },\n        \"required\": [ \n                    \"retrieveValueMethod\",\n                     \"statusRequestMethod\",\n                     \"changeRequestMethod\",\n                     \"convertStatusRequestMethod\",\n                     \"convertStatusChangeMethod\",\n                     \"requestTimeout\"]\n    },\n    \"form\": [\n        \"retrieveValueMethod\",\n        \"updateValueKey\",\n        \"statusRequestMethod\",\n        \"changeRequestMethod\",\n        {\n            \"key\": \"convertStatusRequestMethod\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"convertStatusChangeMethod\",\n            \"type\": \"javascript\"\n        },\n        \"requestTimeout\"\n        \n            ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"switch6\",\"targetDeviceAliases\":[]}"
      }
    },
    {
      "alias": "light_bulb_1",
      "name": "Light Bulb 1",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9,
        "sizeY": 9.5,
        "resources": [],
        "templateHtml": "<img id=\"myImage\" src=\"//sre-solutions.com/static/tb-widget/pic_bulboff.gif\" width=\"100\" height=\"180\">\r\n",
        "templateCss": "#myImage {\r\n\r\n    top: 50%;\r\n     transform: translate(-50%, -50%);\r\n    position: absolute;\r\n  left: 50%;\r\n}",
        "controllerScript": "\n\n\n\nself.onInit = function() {\n    var settings = self.ctx.settings;\n    var scope = self.ctx.$scope;\n    \n    \n    $('#myImage', self.ctx.$container).click(function(e){\n        if ( $('#myImage', self.ctx.$container)[0].src.includes(\"bulbon\"))\n        {\n        $('#myImage', self.ctx.$container)[0].src =  \"//sre-solutions.com/static/tb-widget/pic_bulboff.gif\"\n        requestChange(0,false);\n        }\n        else\n    {\n        $('#myImage', self.ctx.$container)[0].src =  \"//sre-solutions.com/static/tb-widget/pic_bulbon.gif\"\n        requestChange(0,true);\n    }\n    });\n    \n    function requestChange(g, value)\n    {\n\n        var method = settings.changeRequestMethod;\n    \n        var paramsBody = value;\n    \n        \n        var $injector = self.ctx.$injector;\n        let deviceService =self.ctx.deviceService;\n        \n        if (self.ctx.datasources.length > 0)\n        {\n        var dataKeyCounter = 0;\n        var entityId = self.ctx.datasources[0].entityId\n        \n            var requestBody = {\n                 method: method,\n                 params: paramsBody\n                 \n            }\n    \n       console.log(deviceService);\n        \n        \n        deviceService.sendOneWayRpcCommand(entityId, requestBody).subscribe((responseBody) => {});\n        }\n    }\n \n    \n\n\n}\n\nself.onDataUpdated = function() {\n \n \n console.log (self.ctx);\n    var settings = self.ctx.settings;\n    var value = 0;\n    \n    if (self.ctx.defaultSubscription.data.length > 0)\n    {\n        \n            if (self.ctx.defaultSubscription.data.length > 0)\n            {\n                if (self.ctx.defaultSubscription.data[0].data.length > 0)\n                    value = parseInt(self.ctx.defaultSubscription.data[0].data[0][1]);\n                    \n                if (value > 0)\n                {\n                    $('#myImage', self.ctx.$container)[0].src =  \"//sre-solutions.com/static/tb-widget/pic_bulbon.gif\"\n                }\n                else\n                {\n                    $('#myImage', self.ctx.$container)[0].src =  \"//sre-solutions.com/static/tb-widget/pic_bulboff.gif\"\n                }\n\n            }\n      \n        \n        \n    \n    }\n    \n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n}\n\nself.onResize = function() {\n    if (self.ctx.width < parseInt(self.ctx.height) + 50 + \"px\")\n    {\n $('#myImage', self.ctx.$container)[0].style.width = self.ctx.width + \"px\";\n $('#myImage', self.ctx.$container)[0].style.height = \"auto\";\n    }\n else\n     {\n $('#myImage', self.ctx.$container)[0].style.width = \"auto\";\n $('#myImage', self.ctx.$container)[0].style.height = self.ctx.height + \"px\";\n    }\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n           \n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"Change request Method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            }\n        },\n        \"required\": [\n                     \"requestTimeout\",\n                     \"changeRequestMethod\"\n\n                     ]\n    },\n    \"form\": [\n        \"requestTimeout\",\n        \"changeRequestMethod\"\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Light Bulb 1\"}"
      }
    },
    {
      "alias": "slider",
      "name": "Slider",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 8.5,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "<style data=\"test\" type=\"text/css\"></style>\n\n\n<div class=\"slidecontainer\">\n    <div id=\"value_label\">40%</div>\n  <input type=\"range\" min=\"1\" max=\"100\" step=\"1\" value=\"50\" class=\"slider\" id=\"myRange\">\n</div>",
        "templateCss": "\n#container {\n\n  background-position: 50% 50%;\n \n}\n\n#value_label{\n    position: absolute;\n    top: 40px;\n}\n\n.slidecontainer {\n    \n margin: auto;\n  width: 90%; /* Width of the outside container */\n  margin-left: 5%;\n\n}\n\n/* The slider itself */\n.slider {\n  -webkit-appearance: none;  /* Override default CSS styles */\n  appearance: none;\n  width: 100%; /* Full-width */\n  height: 25px; /* Specified height */\n  background: #d3d3d3; /* Grey background */\n  border-radius: 5px;\n  outline: none; /* Remove outline */\n  opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */\n  -webkit-transition: .2s; /* 0.2 seconds transition on hover */\n  transition: opacity .2s;\n}\n\n/* The slider itself */\n.slider_round {\n  -webkit-appearance: none;  /* Override default CSS styles */\n  appearance: none;\n  width: 100%; /* Full-width */\n  height: 25px; /* Specified height */\n  background: #d3d3d3; /* Grey background */\n  border-radius: 5px;\n  outline: none; /* Remove outline */\n  opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */\n  -webkit-transition: .2s; /* 0.2 seconds transition on hover */\n  transition: opacity .2s;\n}\n\n/* Mouse-over effects */\n.slider:hover {\n  opacity: 1; /* Fully shown on mouse-over */\n}\n\n/* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */ \n.slider::-webkit-slider-thumb {\n  -webkit-appearance: none; /* Override default look */\n  appearance: none;\n  width: 25px; /* Set a specific slider handle width */\n  height: 25px; /* Slider handle height */\n  background: blue; /* Green background */\n\n  cursor: pointer; /* Cursor on hover */\n}\n\n.slider::-moz-range-thumb {\n  width: 25px; /* Set a specific slider handle width */\n  height: 25px; /* Slider handle height */\n  background: blue; /* Green background */\n  cursor: pointer; /* Cursor on hover */\n}\n\n/* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */ \n.slider_round::-webkit-slider-thumb {\n  -webkit-appearance: none; /* Override default look */\n  appearance: none;\n  width: 25px; /* Set a specific slider handle width */\n  height: 25px; /* Slider handle height */\n  background: blue; /* Green background */\n    border-radius: 50%;\n  cursor: pointer; /* Cursor on hover */\n}\n\n.slider_round::-moz-range-thumb {\n  width: 25px; /* Set a specific slider handle width */\n  height: 25px; /* Slider handle height */\n  background: blue; /* Green background */\n  border-radius: 50%;\n  cursor: pointer; /* Cursor on hover */\n}",
        "controllerScript": "var namespace;\nvar cssParser = new cssjs();\n\nvar style = document.querySelector('[data=\"test\"]');\n\nself.onInit = function() {\n    \n\n \n      \n    var settings = self.ctx.settings;\n   \n    var slider = $('#myRange', self.ctx.$container)[0]\n    \n    if (settings.style == 'Round')\n        $('#myRange', self.ctx.$container).removeClass('slider').addClass('slider_round');\n    \n    \n    slider.min = settings.sliderMinValue;\n    slider.max = settings.sliderMaxValue;\n    slider.step = settings.sliderStepWidth;\n   slider.style.background = settings.sliderbgColor;\n    \n    function requestStatus() {\n    method = settings.sliderStatusRequestMethod;\n    paramsBody = \"\";\n    self.ctx.controlApi.sendTwoWayCommand(method, \n                        paramsBody, \n                        settings.requestTimeout)\n        .subscribe(\n            function success(responseBody) {\n                   slider.value = parseFloat(responseBody);    \n                   self.onResize();\n                }\n                );\n            }\n    \n    requestStatus();\n    self.onResize();\n    \n    slider.oninput = function() {\n        let sliderWidth = $('#myRange', self.ctx.$container)[0].offsetWidth;\n       \n        let margin = self.ctx.width - sliderWidth;\n        $('#value_label', self.ctx.$container)[0].style.left = (sliderWidth) * slider.value/settings.sliderMaxValue + margin/2 - 20 + \"px\";\n        if (settings.showValue)\n            $('#value_label', self.ctx.$container)[0].innerHTML = slider.value;\n        else\n            $('#value_label', self.ctx.$container)[0].innerHTML = '';\n        \n        \n        \n    }\n    \n    slider.onchange = function() {\n        var method = settings.sliderChangeRequestMethod;\n        \n        var paramsBody = slider.value;\n        \n        \n       \n        self.ctx.controlApi.sendTwoWayCommand(method, \n                                    paramsBody, settings.requestTimeout)\n                    .subscribe(\n                        function success(responseBody) {\n                            \n                        }\n                    );\n}\n\n}\n\n\n\nself.onResize = function() {\n    var slider = $('#myRange', self.ctx.$container)[0]\n    var settings = self.ctx.settings;\n    \n    $('#myRange', self.ctx.$container)[0].style.marginTop = self.ctx.height / 2 - $('#myRange', self.ctx.$container)[0].offsetHeight / 2 -  $('#value_label', self.ctx.$container)[0].offsetHeight/2 + \"px\";\n\n    $('#value_label', self.ctx.$container)[0].style.top = self.ctx.height / 2 - $('#myRange', self.ctx.$container)[0].offsetHeight -  $('#value_label', self.ctx.$container)[0].offsetHeight + \"px\";\n    \n    let sliderWidth = $('#myRange', self.ctx.$container)[0].offsetWidth;\n    let margin = self.ctx.width - sliderWidth;\n\n    $('#value_label', self.ctx.$container)[0].style.left = (sliderWidth) * slider.value/settings.sliderMaxValue + margin/2 - 20 + \"px\";\n    if (settings.showValue)\n    $('#value_label', self.ctx.$container)[0].innerHTML = slider.value;\n    else\n            $('#value_label', self.ctx.$container)[0].innerHTML = '';\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n           \n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"sliderbgColor\": {\n                \"title\": \"Slider Background Color\",\n                \"type\": \"string\",\n                \"default\": \"#4CAF50\"\n            },\n            \"showValue\": {\n                \"title\": \"Show Value\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"sliderMinValue\": {\n                \"title\": \"Min. Value\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n            \"sliderMaxValue\": {\n                \"title\": \"Max. Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"sliderStepWidth\": {\n                \"title\": \"Step Width\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n            \"style\": {\n                \"title\": \"Slider handle style\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"Round\",\n                    \"Rectangle\"],\n                \"default\": \"Round\"\n            },\n            \"sliderChangeRequestMethod\": {\n                \"title\": \"Change request Method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"sliderStatusRequestMethod\": {\n                \"title\": \"Status request Method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            }\n        },\n        \"required\": [\n                     \"requestTimeout\",\n                     \"sliderbgColor\",\n                     \"showValue\",\n                     \"sliderMinValue\",\n                     \"sliderMaxValue\",\n                     \"sliderChangeRequestMethod\",\n                     \"sliderStatusRequestMethod\"\n                     ]\n    },\n    \"form\": [\n        \"requestTimeout\",\n        {\n            \"key\": \"sliderbgColor\",\n            \"type\": \"color\"\n        },\n        \"showValue\",\n        \"sliderMinValue\",\n        \"sliderMaxValue\",\n        \"style\",\n        \"sliderStepWidth\",\n        \"sliderChangeRequestMethod\",\n        \"sliderStatusRequestMethod\"\n        \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Slider\",\"targetDeviceAliases\":[]}"
      }
    },
    {
      "alias": "multi_slider",
      "name": "Multi Slider",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 8.5,
        "sizeY": 9,
        "resources": [
          {
            "url": "https://cdn.jsdelivr.net/gh/rossmann-engineering/js-range-slider@37ce7235b025537be452e5a369720de2bc2764d0/app.css"
          },
          {
            "url": "https://cdn.jsdelivr.net/gh/rossmann-engineering/js-range-slider@904a51836f150118acfafc9c13fa104494d78549/app.js"
          }
        ],
        "templateHtml": "<div id=\"app\"  class=\"multislidertooltip\">\n    \n     <span class = \"multislidertooltiptext\"></span>\n</div>",
        "templateCss": "\n#container {\n\n\n}\n\n#app{\n\n\n\n}",
        "controllerScript": "//https://www.cssscript.com/demo/circular-range-slider-svg/\n//https://github.com/tadejf84/js-range-slider\n//https://webcodeflow.com/concentric-circular-range-slider/\nvar slider;\nvar opts;\nvar values = [0,0,0,0];\nself.onInit = function() {\n    //var settings = self.ctx.settings;\n    //    var sliders = [];\n    //    console.log(settings);\n    //    settings.sliderList.forEach(function(value){\n    //         var sliderelement = {\n    //                radius: 100,\n    //                min: 0,\n    //                max: 100,\n    //                step: 10,\n    //                initialValue: 50,\n    //                color: '#fdcb6e',\n    //                displayName: 'Value 1'\n    //            };\n            \n    //    });\n       settings = self.ctx.settings;\n    if (settings.sliderList != null)\n    {\n\n    for(var i = 0; i < settings.sliderList.length; i++)\n        requestStatus(i);\n    }\n    \n\n   \n        self.onResize();\n        \n\n\n\n}\n\n function requestStatus(sliderNumber) {\n        \n        method = settings.sliderList[sliderNumber].rpcGetValueMethod;\n        paramsBody = \"\";\n        self.ctx.controlApi.sendTwoWayCommand(method, \n                            paramsBody, \n                            settings.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                        \n                        values[sliderNumber] = parseFloat(responseBody); \n                       \n                        self.onResize();  \n                    }\n                    );\n                }\n\n\n\nself.onResize = function() {\n    settings = self.ctx.settings;\n\nconst context =  $('#app', self.ctx.$container).html(\"\");\n\nif (settings.sliderList != null)\n{\n    sliders = []\nfor(var i = 0; i < settings.sliderList.length; i++)\n        {\n            let color = 'red';\n            if (settings.sliderList[i].color == 'Yellow')\n                color = 'yellow';\n            if (settings.sliderList[i].color == 'Blue')\n                color = 'blue';\n            if (settings.sliderList[i].color == 'Green')\n                color = 'green';\n            sliders.push({\n                    radius: 40 + i*60,\n                    min: settings.sliderList[i].minValue,\n                    max: settings.sliderList[i].maxValue,\n                    step: 1,\n                    initialValue: values[i],\n                    color: color,\n                    displayName: settings.sliderList[i].name\n                })\n           \n\n        }\n        opts = {\n            DOMselector: $('#app', self.ctx.$container)[0],\n            sliders: sliders,\n            scale: 1\n        }\n}\nelse\n{\n\nopts = {\n            DOMselector: $('#app', self.ctx.$container)[0],\n            \n            sliders: [\n                {\n                    radius: 100,\n                    min: 0,\n                    max: 100,\n                    step: 10,\n                    initialValue: 50,\n                    color: '#fdcb6e',\n                    displayName: 'Value 1'\n                },\n                {\n                    radius: 160,\n                    min: 0,\n                    max: 3000,\n                    step: 100,\n                    initialValue: 200,\n                    color: '#0984e3',\n                    displayName: 'Value 2'\n                },\n                {\n                    radius: 40,\n                    min: 0,\n                    max: 200,\n                    step: 10,\n                    initialValue: 20,\n                    color: '#d63031',\n                    displayName: 'Value 3'\n                }\n            ], \n            scale: 1\n        };\n}\n\n        var numberOfValues = 3;\n        if (settings.sliderList != null)\n            numberOfValues = settings.sliderList.length;\n            \n        \n        \n        if (self.ctx.width < self.ctx.height)\n        {\n            //opts.scale = 133*numberOfValues/self.ctx.width;\n            opts.scale = 400/self.ctx.width;\n        }\n        else\n        {\n            //opts.scale = 133*numberOfValues/self.ctx.height;\n            opts.scale = 400/self.ctx.width;\n        }\n\n        slider = new Slider(opts);\n        slider.listener = function (handle, value) {valueUpdated(handle, value)}\n        slider.tooltiptextdom = $('.multislidertooltiptext', self.ctx.$container)[0] \n        slider.draw();\n        \n        //Add Class to connect to Legend Widget\n        if (settings.legendID != null)\n        $('#app', self.ctx.$container)[0].classList.add(\"legend\" + settings.legendID.toString());\n        \n        \n \n}\n\nfunction valueUpdated(handle, value)\n{\n    \n  \n    \n    var handleNumber = handle;\n    console.log (handleNumber);\n\n\n    if (settings.sliderList != null)\n    {\n    var method = settings.sliderList[handleNumber].rpcSetValueMethod;\n            var paramsBody = value;\n            \n           \n            self.ctx.controlApi.sendOneWayCommand(method, \n                                        paramsBody, settings.requestTimeout)\n                        /*.subscribe(\n                            function success(responseBody) {\n                                \n                            }\n                        );*/\n    }\n            \n   \n}\n\nself.onDestroy = function() {\n    \n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"legendID\": {\n                \"title\": \"ID to connect Legend Widget\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"sliderList\": {\n                \"title\": \"Slider List\",\n                \"type\": \"array\",\n                \"minItems\" : 1,\n                \"items\": {\n                    \"title\": \"Slider\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\n                            \"title\": \"Name\",\n                            \"type\": \"string\"\n                        },\n                        \"minValue\": {\n                            \"title\": \"Min. value\",\n                            \"type\": \"number\",\n                            \"default\": 0\n                        },\n                        \"maxValue\": {\n                            \"title\": \"Max. value\",\n                            \"type\": \"number\",\n                            \"default\": 100\n                        },\n                        \"rpcGetValueMethod\": {\n                        \"title\": \"RPC get value method\",\n                        \"type\": \"string\",\n                        \"default\": \"getValue\"\n                    },\n                        \"rpcSetValueMethod\": {\n                        \"title\": \"RPC set value method\",\n                        \"type\": \"string\",\n                        \"default\": \"setValue\"\n                    },\n                        \"color\": {\n                            \"title\": \"Color\",\n                            \"type\": \"string\",\n                            \"default\": \"Red\",\n                             \"enum\": [\n                                \"Red\",\n                                \"Yellow\",\n                                \"Blue\",\n                                \"Green\"]\n                        }\n                    },\n                    \"required\": [\"name\", \"rpcGetValueMethod\", \"rpcSetValueMethod\", \"color\"]\n                }\n            }\n            },\n        \"required\": [\"sliderList\"]\n    },\n    \"form\": [\n        \"legendID\",\n        \"sliderList\"\n        \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Multi Slider\"}"
      }
    },
    {
      "alias": "switch_2",
      "name": "Switch 2",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 6.5,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "\n<div class='checkbox'>\n  <label class='checkbox__container'>\n    <input class='checkbox__toggle' type='checkbox'>\n    <span class='checkbox__checker anim'></span>\n    <svg class='checkbox__path' id='checkbox__path' space='preserve' version='1.1' viewbox='0 0 248.868 99.876'>\n      <path class='path path--top' d='M194.27,59.599l42.438-42.028\n\t\tc-9.086-10.419-22.443-17.006-37.215-17.006c-35.529,0-46.643,27.712-75.047,27.712s-38-27.712-75.072-27.712\n\t\tc-13.45,0-25.621,5.355-34.514,14.045l48.098,48.113'></path>\n      <path class='path path--bottom' d='M183.561,48.822l42.521,42.794\n\t\tc-7.649,4.874-16.759,7.697-26.589,7.697c-34.914,0-46.643-30.202-75.06-30.202s-35.527,30.202-75.06,30.202\n\t\tc-13.431,0-25.502-5.255-34.346-13.8l47.93-48.18'></path>\n    </svg>\n    <svg class='checkbox__bg' id='checkbox__bg' space='preserve' version='1.1' viewbox='0 0 248.868 99.876'>\n      <path class='shape-bg' d='M199.493,99.087c27.504,0,49.374-22.106,49.374-49.374S226.552,0.338,199.493,0.338c-35.529,0-46.643,27.712-75.047,27.712\n\t\ts-38-27.712-75.072-27.712C22.048,0.338,0,22.444,0,49.713s21.826,49.374,49.374,49.374c39.533,0,46.643-30.202,75.06-30.202\n\t\tS164.58,99.087,199.493,99.087z'></path>\n    </svg>\n  </label>\n</div>\n",
        "templateCss": "\n\nbody {\n\t background-color: #eee;\n\t padding-top: 40px;\n}\n h1 {\n\t text-align: center;\n\t font-size: 20px;\n\t text-transform: uppercase;\n\t letter-spacing: 1.2px;\n}\n h2 {\n\t text-align: center;\n\t font-size: 14px;\n\t text-transform: uppercase;\n\t letter-spacing: 1.2px;\n}\n hr {\n\t margin: 0 auto;\n\t margin-top: 50px;\n\t margin-bottom: 50px;\n}\n footer {\n\t text-align: center;\n\t padding-bottom: 50px;\n}\n .link {\n\t text-align: center;\n\t color: #278fb2;\n}\n .checkbox {\n\t width: 280px;\n\t margin: 0 auto;\n\t top: 50%;\n     transform:translate(-50%, -50%);\n     \n    position: absolute;\n  left: 55%;\n}\n .checkbox__container {\n\t display: block;\n\t position: relative;\n\t height: 100px;\n}\n .checkbox__toggle {\n\t display: none;\n}\n .checkbox__toggle:checked ~ .checkbox__path .path--top {\n\t stroke-dashoffset: 0px;\n\t stroke: #0cb018;\n}\n .checkbox__toggle:checked ~ .checkbox__path .path--bottom {\n\t stroke-dasharray: 14px 360px;\n\t stroke-dashoffset: 0px;\n\t stroke: #0cb018;\n}\n .checkbox__checker {\n\t position: absolute;\n\t top: 13px;\n\t left: 12px;\n\t z-index: 1;\n\t display: block;\n\t width: 73px;\n\t height: 73px;\n\t background-color: #fff;\n\t border-radius: 50%;\n\t z-index: 9;\n}\n .checkbox__bg, .checkbox__path {\n\t position: absolute;\n\t top: 0;\n\t left: 0;\n\t width: 100%;\n\t height: 100%;\n}\n .checkbox__bg .shape-bg {\n\t fill: #aaa;\n}\n .checkbox__path {\n\t z-index: 9;\n}\n .checkbox__path .shape-bg {\n\t fill: #fff;\n\t stroke-width: 1px;\n\t stroke: #aaa;\n}\n .checkbox__path .path {\n\t stroke-width: 4px;\n\t stroke: #bf1e1e;\n\t fill: none;\n\t stroke-linecap: round;\n\t transition: 1s;\n}\n .checkbox__path .path--top {\n\t stroke-dasharray: 33px 360px;\n\t stroke-dashoffset: -336px;\n}\n .checkbox__path .path--bottom {\n\t stroke-dasharray: 33px 360px;\n\t stroke-dashoffset: -324px;\n}\n .checkbox #checkbox__circle {\n\t z-index: 9;\n\t position: absolute;\n\t top: 0;\n\t left: 0;\n\t width: 100%;\n\t height: 100%;\n\t fill: #fff;\n}\n .anim {\n\t transition-timing-function: cubic-bezier(0.385, -0.6, 0.685, 1.59);\n\t transition-duration: 0.2s;\n}\n .anim--go-right {\n\t left: calc(100% - 120px);\n}\n .anim--speed {\n\t animation-duration: 0.5s;\n\t animation-name: speedSmall;\n}\n @keyframes speed {\n\t 0% {\n\t\t transform: scaleY(0.6);\n\t}\n\t 30% {\n\t\t transform: scaleY(2.3);\n\t}\n\t 60% {\n\t\t transform: scaleY(2.3);\n\t}\n\t 100% {\n\t\t transform: scaleY(0.6);\n\t}\n}\n @keyframes speedSmall {\n\t 0% {\n\t\t transform: scale(1, 1);\n\t}\n\t 25% {\n\t\t transform: scale(0.7, 0.7);\n\t}\n\t 35% {\n\t\t transform: scale(0.7, 0.7);\n\t}\n\t 50% {\n\t\t transform: scale(0.7, 0.3);\n\t}\n\t 65% {\n\t\t transform: scale(0.7, 0.7);\n\t}\n\t 75% {\n\t\t transform: scale(0.7, 0.7);\n\t}\n\t 100% {\n\t\t transform: scale(1, 1);\n\t}\n}\n ",
        "controllerScript": "var namespace;\nvar cssParser = new cssjs();\n\nself.onInit = function() {\n    \n    var settings = self.ctx.settings;\n    //Set Value Mathod\n    var convertStatusChangeMethod = settings.convertStatusChangeMethod || \"return value;\";\n    \n    var convertStatus = new Function(\"value\", convertStatusChangeMethod);\n\n    //Get Value Method\n    var convertGetValueMethod = settings.convertStatusRequestMethod || \"return data ? true : false;\";\n    \n    var convertGetValue = new Function(\"data\", convertGetValueMethod);\n    \n    \nvar toggler = $('.checkbox__toggle', self.ctx.$container);\nvar circle = $('.checkbox__checker', self.ctx.$container);\n\nvar time1 = 150;\nvar time2 = 800;\ntoggler.click(function(){\n    var paramsBody = convertStatus(false);\n\n    checkCheckbox($(this).is(\":checked\"))\n    if ($(this).is(\":checked\"))\n        paramsBody = convertStatus(true);\n      var method = settings.changeRequestMethod || 'setValue';\n            \n            console.log(method);\n            console.log($(this).is(\":checked\"))\n           \n            self.ctx.controlApi.sendOneWayCommand(method, \n                                        paramsBody, settings.requestTimeout)\n                        /*.subscribe(\n                            function success(responseBody) {\n                                \n                            }\n                        );*/\n    \n  \n})\n\nfunction checkCheckbox(checked)\n{\n    \n    //toggler.checked = true;\n    \n    circle.removeClass('anim--speed');\n  if(checked){\n    setTimeout(function(){\n      circle.addClass('anim--speed');\n    },10);\n    setTimeout(function(){\n      circle.addClass('anim--go-right');\n    },time1);\n    //toggler.is(\":checked\") = true;\n  \n  }\n  else{\n      toggler.checked = false;\n    setTimeout(function(){\n      circle.addClass('anim--speed');\n    },10);\n    setTimeout(function(){\n      circle.removeClass('anim--go-right');\n    },time1);\n    //toggler.is(\":checked\") = false;\n  }\n}\n  \n\n        \n\n   function requestStatus() {\n        \n        method = settings.statusRequestMethod;\n        paramsBody = \"\";\n        self.ctx.controlApi.sendTwoWayCommand(method, \n                            paramsBody, \n                            settings.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                        \n                       let value = (convertGetValue(responseBody)); \n                       \n                       if (value)\n                       {\n                       toggler.click();\n                       \n                       \n                       }\n                        else\n                        {\n                        \n                        \n                        }\n                    }\n                    );\n                }\n                \nif ((settings.retrieveValueMethod == \"Subscribe for attribute\") || (settings.retrieveValueMethod == \"Subscribe for timeseries\"))\n{\nvar type = 'timeseries'\nif (settings.retrieveValueMethod == \"Subscribe for attribute\")\n    type = 'attribute'\ndatasources = [\n        {  // datasource\n           type: 'entity',// type of the datasource. Can be \"function\" or \"entity\"\n           name: 'name', // name of the datasource (in case of \"entity\" usually Entity name)\n           aliasName: self.ctx.defaultSubscription.targetDeviceName, // name of the alias used to resolve this particular datasource Entity\n           entityName: self.ctx.defaultSubscription.targetDeviceName, // name of the Entity used as datasource\n           entityType: 'DEVICE', // datasource Entity type (for ex. \"DEVICE\", \"ASSET\", \"TENANT\", etc.)\n           entityId: self.ctx.defaultSubscription.targetDeviceId, // entity identificator presented as string uuid. \n           dataKeys: [ //  array of keys (Array<DataKey>) (attributes or timeseries) of the entity used to fetch data \n               { // dataKey\n                    name: settings.updateValueKey, // the name of the particular entity attribute/timeseries \n                    type: type, // type of the dataKey. Can be \"timeseries\", \"attribute\" or \"function\" \n                    label: settings.updateValueKey, // label of the dataKey. Used as display value (for ex. in the widget legend section) \n                    color: '#ffffff', // color of the key. Can be used by widget to set color of the key data (for ex. lines in line chart or segments in the pie chart).  \n                    funcBody: \"\", // only applicable for datasource with type \"function\" and \"function\" key type. Defines body of the function to generate simulated data.\n                    settings: {} // dataKey specific settings with structure according to the defined Data key settings json schema. See \"Settings schema section\".\n               },\n               //...\n           ]\n        },\n        //...\n    ]\n  function subscribeForLabelPatternsSources(datasources) {\n    const labelPatternsSourcesSubscriptionOptions = {\n      datasources,\n      useDashboardTimewindow: false,\n      type: 'latest',\n      callbacks: {\n        onDataUpdated: (subscription) => {\n          \n          let data = subscription.data[0].data[0][1];\n          \n          let value = (convertGetValue(data)); \n                     \n                       if (value === true)\n                       {\n                           if (!toggler.is(\":checked\"))\n                                toggler.click();\n                       \n                       }\n                        else\n                        {\n                            if (toggler.is(\":checked\"))\n                            toggler.click();\n                        \n                        }\n        }\n      }\n    };\n    \n    self.ctx.subscriptionApi.createSubscription(labelPatternsSourcesSubscriptionOptions, true).subscribe(\n      (subscription) => {\n        //this.labelPatternsSourcesSubscription = subscription;\n      }\n    );\n  }\nsubscribeForLabelPatternsSources(datasources);\n}\n\n    if (settings.retrieveValueMethod == 'Call RPC get value method')\n    {\n        requestStatus()\n    }\n\n\nself.onResize();\n\n}\n\n\nself.onResize = function() {\n    if (self.ctx.width > self.ctx.height+150)\n        $('.checkbox', self.ctx.$container)[0].style.zoom = self.ctx.height/180;\n    else\n    $('.checkbox', self.ctx.$container)[0].style.zoom = self.ctx.width/300;\n    \n    self.ctx.detectChanges();\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"retrieveValueMethod\":\n            {\n                \"title\": \"Retrieve on/off value using method\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Don't retrieve\",\n                                \"Call RPC get value method\",\n                                \"Subscribe for attribute\",\n                                \"Subscribe for timeseries\"],\n                            \"default\": \"Call RPC get value method\"\n            },\n            \"updateValueKey\": {\n                \"title\": \"Attribute/Timeseries value key (only when subscribe for attribute/timeseries method)\",\n                \"type\": \"string\",\n                \"default\": \"value\"\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"statusRequestMethod\": {\n                \"title\": \"RPC get value method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            },\n            \"convertStatusChangeMethod\": {\n                \"title\": \"Convert value function, f(value), returns payload used by RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"return value;\"\n            },\n            \"convertStatusRequestMethod\": {\n                \"title\": \"Parse value function, f(data), returns boolean\",\n                \"type\": \"string\",\n                \"default\": \"return data ? true : false;\"\n            } \n            \n        },\n        \"required\": [ \n                    \"retrieveValueMethod\",\n                     \"statusRequestMethod\",\n                     \"changeRequestMethod\",\n                     \"convertStatusRequestMethod\",\n                     \"convertStatusChangeMethod\",\n                     \"requestTimeout\"]\n    },\n    \"form\": [\n        \"retrieveValueMethod\",\n        \"updateValueKey\",\n        \"statusRequestMethod\",\n        \"changeRequestMethod\",\n        {\n            \"key\": \"convertStatusRequestMethod\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"convertStatusChangeMethod\",\n            \"type\": \"javascript\"\n        },\n        \"requestTimeout\"\n\n            ]\n        \n    \n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Switch 2\"}"
      }
    },
    {
      "alias": "round_slider_1",
      "name": "Round Slider 1",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 8.5,
        "sizeY": 7.5,
        "resources": [
          {
            "url": "https://cdn.jsdelivr.net/npm/round-slider@1.5.1/dist/roundslider.min.js"
          },
          {
            "url": "https://cdn.jsdelivr.net/npm/round-slider@1.5.1/dist/roundslider.min.css"
          }
        ],
        "templateHtml": "<div id=\"slider\"></div>",
        "templateCss": "#slider {\n\n    top: 50%;\n     transform: translate(-50%, -50%);\n    position: absolute;\n    left: 50%;\n    \n\n \n}\n",
        "controllerScript": "//https://roundsliderui.com/\nvar namespace;\nvar cssParser = new cssjs();\n\nself.onInit = function() {\n\nvar settings = self.ctx.settings;\n\n $('#slider', self.ctx.$container).roundSlider({\n    sliderType: \"min-range\",\n    circleShape: \"pie\",\n    startAngle: \"315\",\n    lineCap: \"round\",\n    radius: 130,\n    width: 20,\n    step: settings.sliderStepWidth,\n    min: settings.sliderMinValue,\n    max: settings.sliderMaxValue,\n    \n    svgMode: true,\n\t  pathColor: \"#eee\",\n\t  borderWidth: 0,\n    \n\t  startValue: 0,\n    \n    valueChange: function (e) {\n    \tvar color = e.isInvertedRange ? settings.sliderbgColorPositive : settings.sliderbgColorNegative;\n      \n      $('#slider', self.ctx.$container).roundSlider({ \"rangeColor\": color, \"tooltipColor\": color });\n      \n      \n      var method = settings.sliderChangeRequestMethod;\n        \n        var paramsBody = $('#slider', self.ctx.$container).data(\"roundSlider\").getValue();\n        \n        \n       \n        self.ctx.controlApi.sendTwoWayCommand(method, \n                                    paramsBody, settings.requestTimeout)\n                    .subscribe(\n                        function success(responseBody) {\n                            \n                        }\n                    );\n      \n    }\n});\n\nvar sliderObj =$('#slider', self.ctx.$container).data(\"roundSlider\");\nrequestStatus();\n\n    function requestStatus() {\n    method = settings.sliderStatusRequestMethod;\n    paramsBody = \"\";\n    self.ctx.controlApi.sendTwoWayCommand(method, \n                        paramsBody, \n                        settings.requestTimeout)\n        .subscribe(\n            function success(responseBody) {\n                   sliderObj.setValue(parseFloat(responseBody));   \n                   \n                }\n                );\n            }\n}\n\n\nself.onResize = function() {\n    \n\tvar radius = self.ctx.width / 2 - 10;\n\tif (self.ctx.width > self.ctx.height)\n\t    radius = self.ctx.height / 2 - 10;\n  var width = 14;\n  // here you can restrict the radius and width\n  // based on your application UI structure\n  if (radius > 200) radius = 200;\n  if (radius > 120) width = 22;\n  else if (radius > 70) width = 18;\n  $('#slider', self.ctx.$container).roundSlider({ \"radius\": radius, \"width\": width })\n \n\n\n \n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n           \n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"sliderbgColorPositive\": {\n                \"title\": \"Slider Background Color Positive\",\n                \"type\": \"string\",\n                \"default\": \"#4CAF50\"\n            },\n            \"sliderbgColorNegative\": {\n                \"title\": \"Slider Background Color Negative\",\n                \"type\": \"string\",\n                \"default\": \"#4CAF50\"\n            },\n            \"sliderMinValue\": {\n                \"title\": \"Min. Value\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n            \"sliderMaxValue\": {\n                \"title\": \"Max. Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"sliderStepWidth\": {\n                \"title\": \"Step Width\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n            \"sliderChangeRequestMethod\": {\n                \"title\": \"Change request Method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"sliderStatusRequestMethod\": {\n                \"title\": \"Status request Method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            }\n        },\n        \"required\": [\n                     \"requestTimeout\",\n                     \"sliderbgColorPositive\",\n                     \"sliderbgColorNegative\",\n                     \"sliderMinValue\",\n                     \"sliderMaxValue\",\n                     \"sliderChangeRequestMethod\",\n                     \"sliderStatusRequestMethod\"\n                     ]\n    },\n    \"form\": [\n        \"requestTimeout\",\n        {\n            \"key\": \"sliderbgColorPositive\",\n            \"type\": \"color\"\n        },{\n            \"key\": \"sliderbgColorNegative\",\n            \"type\": \"color\"\n        },\n        \"sliderMinValue\",\n        \"sliderMaxValue\",\n        \"sliderStepWidth\",\n        \"sliderChangeRequestMethod\",\n        \"sliderStatusRequestMethod\"\n        \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Round Slider 1\"}"
      }
    },
    {
      "alias": "switch3",
      "name": "switch3",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 7,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "<main id = 'main'>\r\n\t<input class=\"l\" id=\"checkbox1\" type=\"checkbox\">\r\n</main>",
        "templateCss": "*, *:before, *:after {\r\n\tbox-sizing: border-box;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n:root {\r\n\t/* minFontSize + (maxFontSize - minFontSize) * (100vw - minVWidth)/(maxVWidth - minVWidth) */\r\n\tfont-size: calc(64px + (80 - 64) * (100vw - 320px)/(960 - 320));\r\n}\r\nbody, input {\r\n\tfont-size: 1em;\r\n\tline-height: 1.5;\r\n}\r\nbody {\r\n\tbackground: #bbb;\r\n}\r\ninput {\r\n\tdisplay: block;\r\n\tmargin-bottom: 1.5em;\r\n}\r\nmain {\r\n\tpadding: 1.5em 0 0 0;\r\n\ttext-align: center;\t\r\n}\r\n.l {\r\n\tbackground-color: rgba(0,0,0,0.7);\r\n\tborder-radius: 0.75em;\r\n\tbox-shadow: 0.125em 0.125em 0 0.125em rgba(0,0,0,0.3) inset;\r\n\tcolor: #fdea7b;\r\n\tdisplay: inline-flex;\r\n\talign-items: center;\r\n\tmargin: auto;\r\n\tpadding: 0.15em;\r\n\twidth: 3em;\r\n\theight: 1.5em;\r\n\ttransition: background-color 0.1s 0.3s ease-out, box-shadow 0.1s 0.3s ease-out;\r\n\t-webkit-appearance: none;\r\n\t-moz-appearance: none;\r\n\tappearance: none;\r\n\t    top: 50%;\r\n     transform:translate(-50%, -50%);\r\n     \r\n    position: absolute;\r\n  left: 50%;\r\n}\r\n.l:before, .l:after {\r\n\tcontent: \"\";\r\n\tdisplay: block;\r\n}\r\n.l:before {\r\n\tbackground-color: #d7d7d7;\r\n\tborder-radius: 50%;\r\n\twidth: 1.2em;\r\n\theight: 1.2em;\r\n\ttransition: background-color 0.1s 0.3s ease-out, transform 0.3s ease-out;\r\n\tz-index: 1;\r\n}\r\n.l:after {\r\n\tbackground:\r\n\t\tlinear-gradient(transparent 50%, rgba(0,0,0,0.15) 0) 0 50% / 50% 100%,\r\n\t\trepeating-linear-gradient(90deg,#bbb 0,#bbb,#bbb 20%,#999 20%,#999 40%) 0 50% / 50% 100%,\r\n\t\tradial-gradient(circle at 50% 50%,#888 25%, transparent 26%);\r\n\tbackground-repeat: no-repeat;\r\n\tborder: 0.25em solid transparent;\r\n\tborder-left: 0.4em solid #d8d8d8;\r\n\tborder-right: 0 solid transparent;\r\n\ttransition: border-left-color 0.1s 0.3s ease-out, transform 0.3s ease-out;\r\n\ttransform: translateX(-22.5%);\r\n\ttransform-origin: 25% 50%;\r\n\twidth: 1.2em;\r\n\theight: 1em;\r\n}\r\n/* Checked */\r\n.l:checked {\r\n\tbackground-color: rgba(0,0,0,0.45);\r\n\tbox-shadow: 0.125em 0.125em 0 0.125em rgba(0,0,0,0.1) inset;\r\n}\r\n.l:checked:before {\r\n\tbackground-color: currentColor;\r\n\ttransform: translateX(125%)\r\n}\r\n.l:checked:after {\r\n\tborder-left-color: currentColor;\r\n\ttransform: translateX(-2.5%) rotateY(180deg);\r\n}\r\n/* Other States */\r\n.l:focus {\r\n\t/* Usually an anti-A11Y practice but set to remove an annoyance just for this demo */\r\n\toutline: 0;\r\n}",
        "controllerScript": "//https://codepen.io/jkantner/pen/XEzWGr\nvar namespace;\nvar cssParser = new cssjs();\n\nself.onInit = function() {\n    var settings = self.ctx.settings;\n    \n    self.onResize();\n    \n    \n    $('#checkbox1', self.ctx.$container).change(function() {\n        let checkbox_checked = false;\n        if(this.checked) {\n            checkbox_checked = true;\n        }\n        \n        var method = settings.changeRequestMethod || 'setValue';\n            var paramsBody = convertStatus(checkbox_checked);\n            \n           \n            self.ctx.controlApi.sendOneWayCommand(method, \n                                        paramsBody, settings.requestTimeout)\n        \n        \n    });\n     var convertStatusChangeMethod = settings.convertStatusChangeMethod || \"return value;\";\n     \n    var convertStatus = new Function(\"value\", convertStatusChangeMethod);\n    \n    //Get Value Method\n    var convertGetValueMethod = settings.convertStatusRequestMethod || \"return data ? true : false;\";\n    \n    var convertGetValue = new Function(\"data\", convertGetValueMethod);\n    \n    function requestStatus() {\n        \n        method = settings.statusRequestMethod;\n        paramsBody = \"\";\n        self.ctx.controlApi.sendTwoWayCommand(method, \n                            paramsBody, \n                            settings.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                        \n                       let value = (convertGetValue(responseBody)); \n                       \n                       if (value)\n                       {\n                       $('#checkbox1', self.ctx.$container).prop('checked', true);\n\n\n                       \n                       }\n                        else\n                        {\n                        $('#checkbox1', self.ctx.$container).prop('checked', false);\n                        }\n                    }\n                    );\n                }\n                \n    if ((settings.retrieveValueMethod == \"Subscribe for attribute\") || (settings.retrieveValueMethod == \"Subscribe for timeseries\"))\n{\nvar type = 'timeseries'\nif (settings.retrieveValueMethod == \"Subscribe for attribute\")\n    type = 'attribute'\n    \n\ndatasources = [\n        {  // datasource\n           type: 'entity',// type of the datasource. Can be \"function\" or \"entity\"\n           name: 'name', // name of the datasource (in case of \"entity\" usually Entity name)\n           aliasName: self.ctx.defaultSubscription.targetDeviceName, // name of the alias used to resolve this particular datasource Entity\n           entityName: self.ctx.defaultSubscription.targetDeviceName, // name of the Entity used as datasource\n           entityType: 'DEVICE', // datasource Entity type (for ex. \"DEVICE\", \"ASSET\", \"TENANT\", etc.)\n           entityId: self.ctx.defaultSubscription.targetDeviceId, // entity identificator presented as string uuid. \n           dataKeys: [ //  array of keys (Array<DataKey>) (attributes or timeseries) of the entity used to fetch data \n               { // dataKey\n                    name: settings.updateValueKey, // the name of the particular entity attribute/timeseries \n                    type: type, // type of the dataKey. Can be \"timeseries\", \"attribute\" or \"function\" \n                    label: settings.updateValueKey, // label of the dataKey. Used as display value (for ex. in the widget legend section) \n                    color: '#ffffff', // color of the key. Can be used by widget to set color of the key data (for ex. lines in line chart or segments in the pie chart).  \n                    funcBody: \"\", // only applicable for datasource with type \"function\" and \"function\" key type. Defines body of the function to generate simulated data.\n                    settings: {} // dataKey specific settings with structure according to the defined Data key settings json schema. See \"Settings schema section\".\n               },\n               //...\n           ]\n        },\n        //...\n    ]\nconsole.log(datasources);\n  function subscribeForLabelPatternsSources(datasources) {\n    const labelPatternsSourcesSubscriptionOptions = {\n      datasources,\n      useDashboardTimewindow: false,\n      type: 'latest',\n      callbacks: {\n        onDataUpdated: (subscription) => {\n          \n          let data = subscription.data[0].data[0][1];\n          \n          console.log(subscription)\n          \n          let value = (convertGetValue(data)); \n                   \n                       if (value === true)\n                       {\n                           console.log (\"check\");\n                       $('#checkbox1', self.ctx.$container).prop('checked', true);\n                       \n                       }\n                        else\n                        {\n                        $('#checkbox1', self.ctx.$container).prop('checked', false);\n                        console.log (\"uncheck\");\n                        \n                        }\n        }\n      }\n    };\n    \n    self.ctx.subscriptionApi.createSubscription(labelPatternsSourcesSubscriptionOptions, true).subscribe(\n      (subscription) => {\n        //this.labelPatternsSourcesSubscription = subscription;\n      }\n    );\n  }\nsubscribeForLabelPatternsSources(datasources);\n}\n\n    if (settings.retrieveValueMethod == 'Call RPC get value method')\n    {\n        requestStatus()\n    }\n    \n    \n}\n\n\n\n\n\n\nself.onResize = function() {\n    $('#main', self.ctx.$container)[0].style.zoom = self.ctx.width/50;\n\n\n    if (self.ctx.width > self.ctx.height + 120)\n    $('#main', self.ctx.$container)[0].style.zoom = self.ctx.height/30;\n \n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"retrieveValueMethod\":\n            {\n                \"title\": \"Retrieve on/off value using method\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Don't retrieve\",\n                                \"Call RPC get value method\",\n                                \"Subscribe for attribute\",\n                                \"Subscribe for timeseries\"],\n                            \"default\": \"Call RPC get value method\"\n            },\n            \"updateValueKey\": {\n                \"title\": \"Attribute/Timeseries value key (only when subscribe for attribute/timeseries method)\",\n                \"type\": \"string\",\n                \"default\": \"value\"\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"statusRequestMethod\": {\n                \"title\": \"RPC get value method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            },\n            \"convertStatusChangeMethod\": {\n                \"title\": \"Convert value function, f(value), returns payload used by RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"return value;\"\n            },\n            \"convertStatusRequestMethod\": {\n                \"title\": \"Parse value function, f(data), returns boolean\",\n                \"type\": \"string\",\n                \"default\": \"return data ? true : false;\"\n            } \n            \n        },\n        \"required\": [ \n                    \"retrieveValueMethod\",\n                     \"statusRequestMethod\",\n                     \"changeRequestMethod\",\n                     \"convertStatusRequestMethod\",\n                     \"convertStatusChangeMethod\",\n                     \"requestTimeout\"]\n    },\n    \"form\": [\n        \"retrieveValueMethod\",\n        \"updateValueKey\",\n        \"statusRequestMethod\",\n        \"changeRequestMethod\",\n        {\n            \"key\": \"convertStatusRequestMethod\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"convertStatusChangeMethod\",\n            \"type\": \"javascript\"\n        },\n        \"requestTimeout\"\n        \n            ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"switch3\"}"
      }
    },
    {
      "alias": "switch_1",
      "name": "Switch 1",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 9,
        "sizeY": 7.5,
        "resources": [
          {
            "url": "//sre-solutions.com/static/tb-widget/on-off-switch.css"
          },
          {
            "url": "//sre-solutions.com/static/tb-widget/on-off-switch.js"
          },
          {
            "url": "//sre-solutions.com/static/tb-widget/on-off-switch-onload.js"
          }
        ],
        "templateHtml": "<div class=\"checkbox-container\">\r\n\r\n\r\n    <input type=\"checkbox\" name=\"on-off-switch\" id=\"on-off-switch\" checked=\"\">\r\n</div>",
        "templateCss": ".on-off-switch\n{\n    \n    top: 50%;\n     transform:translate(-50%, -50%);\n     \n    position: absolute;\n  left: 50%;\n  \n}",
        "controllerScript": "var namespace;\nvar cssParser = new cssjs();\nvar dg;\n\nself.onInit = function() {\n\n\n\n    console.log(self.ctx);\n    var settings = self.ctx.settings;\n        dg = new DG.OnOffSwitch({\n            el:  $('#on-off-switch', self.ctx.$container),\n            height: settings.height || 150,\n            trackColorOn:settings.backgroundcolorOn || \"#F57C00\",\n            trackColorOff:settings.backgroundcolorOff || \"#666\",\n            trackBorderColor:'#555',\n            textColorOff:settings.textColorOff || \"#fff\",\n            textColorOn:settings.textColorOn || \"#fff\",\n            textOn:settings.textOn || \"ON\",\n            textOff:settings.textOff || \"OFF\",\n            listener:function(name, checked){\n\n            \n\n            var method = settings.changeRequestMethod || 'setValue';\n            var paramsBody = convertStatus(checked);\n            \n           \n            self.ctx.controlApi.sendOneWayCommand(method, \n                                        paramsBody, settings.requestTimeout)\n            }\n\n            \n            \n            \n        });\n        \n        \n\n        \n    //Set Value Mathod\n    var convertStatusChangeMethod = settings.convertStatusChangeMethod || \"return value;\";\n    \n    var convertStatus = new Function(\"value\", convertStatusChangeMethod);\n\n    //Get Value Method\n    var convertGetValueMethod = settings.convertStatusRequestMethod || \"return data ? true : false;\";\n    \n    var convertGetValue = new Function(\"data\", convertGetValueMethod);\n    \n    function requestStatus() {\n        \n        method = settings.statusRequestMethod;\n        paramsBody = \"\";\n        self.ctx.controlApi.sendTwoWayCommand(method, \n                            paramsBody, \n                            settings.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                        \n                       let value = (convertGetValue(responseBody)); \n                       dg.listener = undefined;\n                       if (value)\n                       {\n                       //$('#on-off-switch', self.ctx.$container).checked = true;\n                       //$('#on-off-switch', self.ctx.$container).value = true;\n                       dg.check();\n                       \n                       }\n                        else\n                        {\n                            dg.uncheck();\n                        //$('#on-off-switch', self.ctx.$container).checked = false;\n                        //$('#on-off-switch', self.ctx.$container).click();\n                        }\n                        dg.listener = function(name, checked){\n\n            \n\n            var method = settings.changeRequestMethod || 'setValue';\n            var paramsBody = convertStatus(checked);\n            \n           \n            self.ctx.controlApi.sendOneWayCommand(method, \n                                        paramsBody, settings.requestTimeout)\n            }\n                    }\n                    );\n                   \n                }\n     \nconsole.log(self.ctx.defaultSubscription);\n\nif ((settings.retrieveValueMethod == \"Subscribe for attribute\") || (settings.retrieveValueMethod == \"Subscribe for timeseries\"))\n{\nvar type = 'timeseries'\nif (settings.retrieveValueMethod == \"Subscribe for attribute\")\n    type = 'attribute'\ndatasources = [\n        {  // datasource\n           type: 'entity',// type of the datasource. Can be \"function\" or \"entity\"\n           name: 'name', // name of the datasource (in case of \"entity\" usually Entity name)\n           aliasName: self.ctx.defaultSubscription.targetDeviceName, // name of the alias used to resolve this particular datasource Entity\n           entityName: self.ctx.defaultSubscription.targetDeviceName, // name of the Entity used as datasource\n           entityType: 'DEVICE', // datasource Entity type (for ex. \"DEVICE\", \"ASSET\", \"TENANT\", etc.)\n           entityId: self.ctx.defaultSubscription.targetDeviceId, // entity identificator presented as string uuid. \n           dataKeys: [ //  array of keys (Array<DataKey>) (attributes or timeseries) of the entity used to fetch data \n               { // dataKey\n                    name: settings.updateValueKey, // the name of the particular entity attribute/timeseries \n                    type: type, // type of the dataKey. Can be \"timeseries\", \"attribute\" or \"function\" \n                    label: settings.updateValueKey, // label of the dataKey. Used as display value (for ex. in the widget legend section) \n                    color: '#ffffff', // color of the key. Can be used by widget to set color of the key data (for ex. lines in line chart or segments in the pie chart).  \n                    funcBody: \"\", // only applicable for datasource with type \"function\" and \"function\" key type. Defines body of the function to generate simulated data.\n                    settings: {} // dataKey specific settings with structure according to the defined Data key settings json schema. See \"Settings schema section\".\n               },\n               //...\n           ]\n        },\n        //...\n    ]\n  function subscribeForLabelPatternsSources(datasources) {\n    const labelPatternsSourcesSubscriptionOptions = {\n      datasources,\n      useDashboardTimewindow: false,\n      type: 'latest',\n      callbacks: {\n        onDataUpdated: (subscription) => {\n          console.log(subscription.data[0].data[0][1]);\n          let data = subscription.data[0].data[0][1];\n          \n          dg.listener = undefined;\n          let value = (convertGetValue(data)); \n                   \n                       if (value === true)\n                       {\n                           console.log (\"check\");\n                       dg.check()\n                       \n                       }\n                        else\n                        {\n                        dg.uncheck();\n                        console.log (\"uncheck\");\n                        \n                        }\n                        \n            dg.listener = function(name, checked){\n\n            \n\n            var method = settings.changeRequestMethod || 'setValue';\n            var paramsBody = convertStatus(checked);\n            \n           \n            self.ctx.controlApi.sendOneWayCommand(method, \n                                        paramsBody, settings.requestTimeout)\n            }\n        }\n      }\n    };\n    \n    self.ctx.subscriptionApi.createSubscription(labelPatternsSourcesSubscriptionOptions, true).subscribe(\n      (subscription) => {\n        //this.labelPatternsSourcesSubscription = subscription;\n      }\n    );\n  }\nsubscribeForLabelPatternsSources(datasources);\n}\n\n    if (settings.retrieveValueMethod == 'Call RPC get value method')\n    {\n        requestStatus()\n    }\n    self.onResize();\n}\n    \n\n\n\nself.onResize = function() {\n\n    $('.on-off-switch', self.ctx.$container)[0].style.zoom = self.ctx.width/500;\n\n\n    if (parseInt($('.on-off-switch', self.ctx.$container)[0].style.height) > self.ctx.height)\n    $('.on-off-switch', self.ctx.$container)[0].style.zoom = self.ctx.height/180;\n    \n  //  $('#on-off-switch', self.ctx.$container)[0].style.marginLeft = self.ctx.width - $('.checkbox-container', self.ctx.$container)[0].offsetWidth + \"px\";\n  \n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"retrieveValueMethod\":\n            {\n                \"title\": \"Retrieve on/off value using method\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"Don't retrieve\",\n                                \"Call RPC get value method\",\n                                \"Subscribe for attribute\",\n                                \"Subscribe for timeseries\"],\n                            \"default\": \"Call RPC get value method\"\n            },\n            \"updateValueKey\": {\n                \"title\": \"Attribute/Timeseries value key (only when subscribe for attribute/timeseries method)\",\n                \"type\": \"string\",\n                \"default\": \"value\"\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"statusRequestMethod\": {\n                \"title\": \"RPC get value method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            },\n            \"backgroundcolorOn\": {\n                \"title\": \"Background Color On\",\n                \"type\": \"string\",\n                \"default\": \"#F57C00\"\n            },\n            \"backgroundcolorOff\": {\n                \"title\": \"Background Color Off\",\n                \"type\": \"string\",\n                \"default\": \"#666\"\n            },\n            \"textColorOn\": {\n                \"title\": \"Text Color On\",\n                \"type\": \"string\",\n                \"default\": \"#fff\"\n            },\n            \"textColorOff\": {\n                \"title\": \"Text Color Off\",\n                \"type\": \"string\",\n                \"default\": \"#fff\"\n            },\n            \"height\": {\n                \"title\": \"Height in px\",\n                \"type\": \"number\",\n                \"default\": 150\n            },\n            \"textOn\": {\n                \"title\": \"Text ON\",\n                \"type\": \"string\",\n                \"default\": \"ON\"\n            },\n            \"textOff\": {\n                \"title\": \"Text OFF\",\n                \"type\": \"string\",\n                \"default\": \"OFF\"\n            },\n            \"convertStatusChangeMethod\": {\n                \"title\": \"Convert value function, f(value), returns payload used by RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"return value;\"\n            },\n            \"convertStatusRequestMethod\": {\n                \"title\": \"Parse value function, f(data), returns boolean\",\n                \"type\": \"string\",\n                \"default\": \"return data ? true : false;\"\n            } \n            \n        },\n        \"required\": [ \n                    \"retrieveValueMethod\",\n                     \"statusRequestMethod\",\n                     \"changeRequestMethod\",\n                     \"convertStatusRequestMethod\",\n                     \"convertStatusChangeMethod\",\n                     \"requestTimeout\",\n                     \"backgroundcolorOn\",\n                     \"backgroundcolorOff\",\n                     \"textColorOn\",\n                     \"textColorOff\",\n                     \"height\",\n                     \"textOn\",\n                     \"textOn\"]\n    },\n    \"form\": [\n        \"retrieveValueMethod\",\n        \"updateValueKey\",\n        \"statusRequestMethod\",\n        \"changeRequestMethod\",\n        {\n            \"key\": \"convertStatusRequestMethod\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"convertStatusChangeMethod\",\n            \"type\": \"javascript\"\n        },\n        \"requestTimeout\",\n        {\n            \"key\": \"backgroundcolorOn\",\n            \"type\": \"color\"\n        },{\n            \"key\": \"backgroundcolorOff\",\n            \"type\": \"color\"\n        },{\n            \"key\": \"textColorOn\",\n            \"type\": \"color\"\n        },{\n            \"key\": \"textColorOff\",\n            \"type\": \"color\"\n        },\n        \"height\",\n        \"textOn\",\n        \"textOff\"\n            ]\n        \n    \n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Switch 1\"}"
      }
    },
    {
      "alias": "thermostat_1",
      "name": "Thermostat 1",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 8,
        "sizeY": 8,
        "resources": [],
        "templateHtml": "<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\r\n      rel=\"stylesheet\">\r\n\r\n<div class=\"thermostat\">\r\n  <div class=\"bar\">\r\n    <div class=\"inner_bar\"></div>\r\n    <div class='hold left'>\r\n      <div class='fill fill1'></div>\r\n    </div>\r\n    <div class='hold right'>\r\n      <div class='fill fill2'></div>\r\n    </div>\r\n    <span>Heating</span>\r\n  </div>\r\n  <div class=\"shadow\">\r\n    <div class=\"shadow-cube\"></div>\r\n  </div>\r\n  <div class=\"number\">\r\n    <span class=\"ext\">19</span>\r\n  </div>\r\n  <div class=\"center\">\r\n    <span class=\" minus\"><i class=\"material-icons\">keyboard_arrow_left</i></span>\r\n    <span class=\" plus\"><i class=\"material-icons\">keyboard_arrow_right</i></span>\r\n    <div class=\"small\">\r\n      <span class=\"heat\">19</span>\r\n    </div>\r\n  </div>\r\n</div>",
        "templateCss": "@import url('https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700');\n * {\n\t box-sizing: border-box;\n\t -webkit-user-select: none;\n\t -moz-user-select: none;\n\t -ms-user-select: none;\n\t user-select: none;\n}\n html, body {\n\t margin: 0;\n\t background: #fdfdfd;\n\t font-family: 'Open Sans', sans-serif;\n}\n .center_radius, .thermostat, .thermostat .bar, .thermostat .center, .thermostat .center .small {\n\t top: 50%;\n\t left: 50%;\n\t transform: translate(-50%, -50%);\n\t border-radius: 50%;\n}\n .thermostat {\n\t position: absolute;\n\t width: 400px;\n\t height: 400px;\n\t background: #6d697f;\n\t box-shadow: inset 0px -6px 1px 2px rgba(0, 0, 0, 0.35), 0px 7px 40px 11px rgba(84, 81, 97, 0.40);\n}\n .thermostat:hover .number {\n\t opacity: 1;\n}\n .thermostat .shadow {\n\t position: absolute;\n\t top: 50%;\n\t left: 50%;\n\t transform: translate(-50%, -50%) rotateZ(10deg);\n\t width: 25px;\n\t height: 86%;\n\t text-align: center;\n\t transition: 0.7s ease;\n\t animation: shadow 1.4s ease-out both;\n}\n .thermostat .shadow .shadow-cube {\n\t position: absolute;\n\t top: 0;\n\t width: 25px;\n\t height: 0px;\n\t box-shadow: 0 0 45px 13px rgba(255, 158, 35, 0.5);\n}\n .thermostat .number {\n\t position: absolute;\n\t top: 50%;\n\t left: 50%;\n\t transform: translate(-50%, -50%) rotateZ(10deg);\n\t width: 40px;\n\t height: 82%;\n\t text-align: center;\n\t transition: 0.7s ease;\n\t opacity: 0;\n}\n .thermostat .number .ext {\n\t font-size: 16px;\n\t color: white;\n\t font-weight: 1000;\n\t text-shadow: 1px 3px 3px #302e38;\n}\n .thermostat .bar {\n\t position: absolute;\n\t width: 356px;\n\t height: 356px;\n}\n .thermostat .bar .inner_bar {\n\t position: absolute;\n\t top: 50%;\n\t left: 50%;\n\t width: 344px;\n\t height: 344px;\n\t margin-left: -172px;\n\t margin-top: -172px;\n\t border-radius: 100%;\n\t background-color: #6d697f;\n\t z-index: 4;\n}\n .thermostat .bar .inner_bar:after {\n\t content: '';\n\t display: block;\n\t position: absolute;\n\t width: 0;\n\t height: 0;\n\t border-top: 70px solid transparent;\n\t border-left: 70px solid transparent;\n\t border-right: 70px solid transparent;\n\t border-bottom: 150px solid #6d697f;\n\t bottom: -7px;\n\t left: 50%;\n\t transform: translatex(-50%);\n}\n .thermostat .bar .hold {\n\t position: absolute;\n\t width: 100%;\n\t height: 100%;\n\t clip: rect(0px, 356px, 356px, 178px);\n\t border-radius: 100%;\n\t background-color: #3a3749;\n}\n .thermostat .bar .fill {\n\t position: absolute;\n\t width: 100%;\n\t height: 100%;\n\t border-radius: 100%;\n\t clip: rect(0px, 178px, 356px, 0px);\n}\n .thermostat .bar .fill1 {\n\t background: -webkit-linear-gradient(top, #ff4900 20%, #ff4900 100%);\n}\n .thermostat .bar .fill2 {\n\t background: -webkit-linear-gradient(top, #ff4900 40%, #ff9e23 100%);\n}\n .thermostat .bar .right {\n\t z-index: 3;\n\t -webkit-transform: rotate(180deg);\n\t -moz-transform: rotate(180deg);\n\t transform: rotate(180deg);\n}\n .thermostat .bar .right .fill {\n\t z-index: 3;\n\t transform: rotate(180deg);\n\t animation: right 1s linear both;\n\t transition: transform 0.6s;\n}\n .thermostat .bar .left .fill {\n\t z-index: 1;\n\t animation: left 0.3s linear both;\n\t animation-delay: 1s;\n\t transition: transform 0.6s;\n}\n .thermostat .bar span {\n\t width: 356px;\n\t font-weight: 800;\n\t position: absolute;\n\t bottom: 0px;\n\t text-align: center;\n\t text-transform: uppercase;\n\t font-size: 15px;\n\t color: #2e2c3a;\n\t z-index: 10;\n}\n .thermostat .center {\n\t position: absolute;\n\t width: 260px;\n\t height: 260px;\n\t background: #e3e4ed;\n\t animation: bound-in 0.6s ease forwards;\n}\n .thermostat .center:hover .arrow {\n\t opacity: 1;\n\t transition: opacity 0.3s;\n}\n .thermostat .center:hover .minus {\n\t left: 10px;\n\t transition: left 0.3s ease-out;\n}\n .thermostat .center:hover .plus {\n\t right: 45px;\n\t transition: right 0.3s ease-out;\n}\n .thermostat .center span i {\n\t position: absolute;\n\t color: #b9b6c8;\n\t font-size: 40px;\n\t font-weight: 500;\n\t line-height: 260px;\n}\n .thermostat .center .arrow {\n\t opacity: 0;\n\t transition: opacity 0.3s;\n\t cursor: pointer;\n}\n .thermostat .center .minus {\n\t position: absolute;\n\t animation: arrow-left 1s forwards;\n}\n .thermostat .center .plus {\n\t position: absolute;\n\t animation: arrow-right 1s forwards;\n}\n .thermostat .center .small {\n\t position: absolute;\n\t width: 150px;\n\t height: 150px;\n\t background: #f8f9fa;\n\t text-align: center;\n\t animation: bound-in-small 0.6s ease forwards;\n}\n .thermostat .center .small .heat {\n\t line-height: 150px;\n\t font-size: 59px;\n\t color: #57545f;\n\t font-weight: 300;\n}\n .thermostat .center .small .heat:after {\n\t content: '°';\n\t display: block;\n\t position: absolute;\n\t font-size: 40px;\n\t top: -20px;\n\t right: 30px;\n}\n @-webkit-keyframes shadow {\n\t 0% {\n\t\t transform: translate(-50%, -50%) rotate(-190deg);\n\t}\n\t 100% {\n\t\t transform: translate(-50%, -50%) rotate(10deg);\n\t}\n}\n @-webkit-keyframes right {\n\t 0% {\n\t\t transform: rotate(0deg);\n\t}\n\t 100% {\n\t\t transform: rotate(180deg);\n\t}\n}\n @-webkit-keyframes left {\n\t 0% {\n\t\t transform: rotate(0deg);\n\t}\n\t 100% {\n\t\t transform: rotate(10deg);\n\t}\n}\n @-webkit-keyframes bound-in {\n\t 10% {\n\t\t box-shadow: 0px 7px 30px 5px rgba(96, 93, 111, 0.25);\n\t\t transform: translate(-50%, -50%) scale(0.8);\n\t}\n\t 80% {\n\t\t transform: translate(-50%, -50%) scale(1.03);\n\t}\n\t 100% {\n\t\t box-shadow: 0px 15px 35px 11px rgba(46, 44, 58, 0.60);\n\t\t transform: translate(-50%, -50%) scale(1);\n\t}\n}\n @-webkit-keyframes bound-in-small {\n\t 0% {\n\t\t box-shadow: 0px 5px 10px 5px rgba(96, 93, 111, 0.19);\n\t\t transform: translate(-50%, -50%) scale(0.8);\n\t}\n\t 80% {\n\t\t transform: translate(-50%, -50%) scale(1.03);\n\t}\n\t 100% {\n\t\t box-shadow: 0px 15px 35px 5px rgba(96, 93, 111, 0.30);\n\t\t transform: translate(-50%, -50%) scale(1);\n\t}\n}\n @-webkit-keyframes arrow-left {\n\t 0% {\n\t\t left: 45px;\n\t\t opacity: 0;\n\t}\n\t 100% {\n\t\t left: 10px;\n\t\t opacity: 1;\n\t}\n}\n @-webkit-keyframes arrow-right {\n\t 0% {\n\t\t right: 75px;\n\t\t opacity: 0;\n\t}\n\t 100% {\n\t\t right: 45px;\n\t\t opacity: 1;\n\t}\n}\n ",
        "controllerScript": "\nvar gradi = 55;\nself.onInit = function() {\nvar settings = self.ctx.settings;\n\nvar max = settings.maxValue;\nvar min = settings.minValue;\nvar units = 320 / (max - min);\nvar center_value = (min + max) / 2;\nvar start_degree = -160;\nconst start_degree_delta = 20;\nconst fill2_start_value = 180;\nvar move_unit = 1;\nif (settings.stepWidth == '0.1')\n    move_unit = 0.1;\n\nrequestStatus();\n\nfunction updateGr() {\n  $('.heat', self.ctx.$container).text('' + gradi);\n  $('.ext', self.ctx.$container).text('' + gradi);\n  var v = start_degree + (gradi - min) * units;\n  console.log(v);\n  $('.number', self.ctx.$container).css('transform', `translate(-50%, -50%) rotate(${v}deg)`);\n  $('.fill', self.ctx.$container).css('animation', 'none');\n  $('.shadow', self.ctx.$container).css('animation', 'none');\n}\n\nconst getFixedValue = (value) => {\n  console.log(value);\n  return +value.toFixed(1);\n};\n\nconst minux_action = () => {\n  if (gradi > min) {\n    gradi = getFixedValue(gradi - move_unit);\n    updateGr();\n    const low_value = center_value - 1;\n\n    if (gradi >= center_value) {\n      $('.fill1', self.ctx.$container)\n        .css('transform', `rotate(${(gradi - center_value) * units}deg)`)\n        .css('transition-delay', '0s');\n    } else if (gradi == low_value) {\n      $('.fill2', self.ctx.$container)\n        .css(\n          'transform',\n          `rotate(${(gradi - min) * units + start_degree_delta}deg)`\n        )\n        .css('transition-delay', '0.5s');\n    } else {\n      $('.fill2', self.ctx.$container)\n        .css(\n          'transform',\n          `rotate(${(gradi - min) * units + start_degree_delta}deg)`\n        )\n        .css('transition-delay', '0s');\n        $('.fill1', self.ctx.$container)\n        .css(\n          'transform',\n          `rotate(${0}deg)`\n        )\n        .css('transition-delay', '0s');\n        \n    }\n    sendValue();\n  }\n  \n};\nconst plus_action = () => {\n  const top_value = center_value + 1;\n  if (gradi < max) {\n    gradi = getFixedValue(gradi + move_unit);\n    updateGr();\n    if (gradi > top_value) {\n      $('.fill1', self.ctx.$container)\n        .css('transform', `rotate(${(gradi - center_value) * units}deg)`)\n        .css('transition-delay', '0s');\n    } else if (gradi == top_value) {\n      $('.fill1', self.ctx.$container)\n        .css('transform', `rotate(${(gradi - center_value) * units}deg)`)\n        .css('transition-delay', '0.5s');\n    } else {\n      $('.fill2', self.ctx.$container)\n        .css(\n          'transform',\n          `rotate(${(gradi - min) * units + start_degree_delta}deg)`\n        )\n        .css('transition-delay', '0s');\n    }\n    sendValue();\n  }\n  \n};\nconst init = () => {\n  minux_action();\n  plus_action();\n  updateGr();\n};\n\n$('.minus', self.ctx.$container).mousedown(minux_action);\n$('.plus', self.ctx.$container).mousedown(plus_action);\n\ninit();\n\nfunction requestStatus() {\n    method = settings.statusRequestMethod;\n    timeout = settings.requestTimeout;\n    paramsBody = \"\";\n    self.ctx.controlApi.sendTwoWayCommand(method, \n                        paramsBody, \n                        timeout)\n        .subscribe(\n            function success(responseBody) {\n                   gradi = parseFloat(responseBody);   \n                   if (gradi < min)\n                        gradi = min;\n                 if (gradi > max)\n                    gradi = max;\n                   updateGr();\n                   init();\n                }\n                );\n}\n\n\n\n\n\n\n}\n\n    sendValue = function() {\n        var settings = self.ctx.settings;\n        var method = settings.changeRequestMethod;\n        \n        var paramsBody = gradi;\n        \n        \n       \n        self.ctx.controlApi.sendTwoWayCommand(method, \n                                    paramsBody, settings.requestTimeout)\n                    .subscribe(\n                        function success(responseBody) {\n                            \n                        }\n                    );\n}\n\n\nself.onResize = function() {\n    if (self.ctx.height < self.ctx.width)\n $('.thermostat', self.ctx.$container)[0].style.zoom =  1*(self.ctx.height / 410);\n    else\n     $('.thermostat', self.ctx.$container)[0].style.zoom =  1*(self.ctx.width / 410);\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"minValue\": {\n                \"title\": \"Minimum Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"maxValue\": {\n                \"title\": \"Maximum Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"stepWidth\": {\n                \"title\": \"Step Width\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"0.1\",\n                    \"1\"],\n                \"default\": \"1\"\n            },\n\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"statusRequestMethod\": {\n                \"title\": \"Status request Method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"Change request Method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n        \"required\": [\n                     \"requestTimeout\",\n                     \"statusRequestMethod\",\n                      \"changeRequestMethod\"\n                     ]\n        }\n    },\n    \"form\": [\n        \"minValue\",\n        \"maxValue\",\n        \"stepWidth\",\n        \"requestTimeout\",\n    \"statusRequestMethod\",\n     \"changeRequestMethod\"\n    ]\n\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"requestTimeout\":500,\"maxValue\":100,\"stepWidth\":\"1\",\"statusRequestMethod\":\"getValue\",\"changeRequestMethod\":\"setValue\",\"minValue\":0},\"title\":\"Thermostat 1\",\"targetDeviceAliasIds\":[\"6fc9ec03-fff4-e055-1590-c3f4ee02d74e\"]}"
      }
    },
    {
      "alias": "thermostat_2",
      "name": "Thermostat 2",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 7,
        "sizeY": 6,
        "resources": [],
        "templateHtml": "<div class=\"thermostat\">\r\n\r\n  <div class=\"control up\">\r\n    <i class=\"fa fa-plus fa-fw\"></i>\r\n  </div>\r\n\r\n  <div class=\"temperature\">\r\n    <span class=\"degrees\"></span><span>°</span>\r\n  </div>\r\n\r\n  <div class=\"control down\">\r\n    <i class=\"fa fa-minus fa-fw\"></i>\r\n  </div>\r\n\r\n</div>",
        "templateCss": "#container {\n\t background: #b197fc;\n\t background: linear-gradient(to right, #d0bfff, #9775fa);\n\t color: #7950f2;\n}\n .thermostat {\n\t position: absolute;\n\t left: 50%;\n\t top: 50%;\n\t transform: translateX(-50%) translateY(-50%);\n}\n .thermostat .temperature {\n\t font-size: 100px;\n\t font-weight: 600;\n\t text-align: center;\n}\n .thermostat .temperature span::selection {\n\t background: transparent;\n}\n .thermostat .control {\n\t font-size: 32px;\n\t text-align: center;\n}\n .thermostat .control i:hover {\n\t cursor: pointer;\n}\n ",
        "controllerScript": "var namespace;\nvar cssParser = new cssjs();\n\nvar number = 20;\n\nself.onInit = function() {\n    var settings = self.ctx.settings;\n    var move_unit = 1;\nif (settings.stepWidth == '0.1')\n    move_unit = 0.1;\n\nrequestStatus();\n    \n    requestStatus()\n    \n    \n    const temperature = document.querySelector(\".degrees\")\nconst up = document.querySelector(\".up i\")\nconst down = document.querySelector(\".down i\")\n\n\n\ntemperature.innerHTML = number\n\nfunction hotter() {\n  up.style.opacity = \"1\"\n  down.style.opacity = \"1\"\n\n  if (number < settings.maxValue) {\n    number = number + move_unit;\n    temperature.innerHTML = number.toFixed(1);\n  }\n\n  if (number === settings.maxValue) {\n    up.style.opacity = \"0.5\"\n  }\n  \n  sendValue();\n  \n}\n\nfunction colder() {\n  up.style.opacity = \"1\"\n  down.style.opacity = \"1\"\n\n  if (number > settings.minValue) {\n    number = number - move_unit;\n    temperature.innerHTML = number.toFixed(1);\n  }\n\n  if (number === settings.minValue) {\n    down.style.opacity = \"0.5\"\n  }\n  \n  sendValue();\n \n  \n  \n  \n  \n}\n\nup.addEventListener(\"click\", hotter)\ndown.addEventListener(\"click\", colder)\n\n    sendValue = function() {\n        var settings = self.ctx.settings;\n        var method = settings.changeRequestMethod;\n        \n        var paramsBody = number.toFixed(1);\n        \n        \n       \n        self.ctx.controlApi.sendTwoWayCommand(method, \n                                    paramsBody, settings.requestTimeout)\n                    .subscribe(\n                        function success(responseBody) {\n                            \n                        }\n                    );\n}\n\n\nfunction requestStatus() {\n    method = settings.statusRequestMethod;\n    timeout = settings.requestTimeout;\n    paramsBody = \"\";\n    self.ctx.controlApi.sendTwoWayCommand(method, \n                        paramsBody, \n                        timeout)\n        .subscribe(\n            function success(responseBody) {\n                   number = parseFloat(responseBody);   \n                   if (number < settings.min)\n                        number = settings.min;\n                 if (number > settings.max)\n                    number = settings.max;\n                   temperature.innerHTML = number;\n                }\n                );\n}\n\n\n}\n\n\n\nself.onResize = function() {\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"minValue\": {\n                \"title\": \"Minimum Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"maxValue\": {\n                \"title\": \"Maximum Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"stepWidth\": {\n                \"title\": \"Step Width\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"0.1\",\n                    \"1\"],\n                \"default\": \"1\"\n            },\n\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"statusRequestMethod\": {\n                \"title\": \"Status request Method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"Change request Method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n        \"required\": [\n                     \"requestTimeout\",\n                     \"statusRequestMethod\",\n                      \"changeRequestMethod\"\n                     ]\n        }\n    },\n    \"form\": [\n        \"minValue\",\n        \"maxValue\",\n        \"stepWidth\",\n        \"requestTimeout\",\n    \"statusRequestMethod\",\n     \"changeRequestMethod\"\n    ]\n\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"requestTimeout\":500,\"maxValue\":100,\"stepWidth\":\"1\",\"statusRequestMethod\":\"getValue\",\"changeRequestMethod\":\"setValue\",\"minValue\":0},\"title\":\"Thermostat 2\",\"targetDeviceAliasIds\":[\"ce1ae231-5815-c34b-e94d-4edea4b1533b\"]}"
      }
    },
    {
      "alias": "toggle_button_1",
      "name": "Toggle Button 1",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "rpc",
        "sizeX": 5,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "<div class=\"switch\">\r\n\t<input type=\"checkbox\" id=\"switch\" name=\"switch\" >\r\n\t<label></label>\r\n</div> ",
        "templateCss": ".switch input {\r\n    /* First, we make it as wide as the container */\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    /* Then, we put it on top of everything else */\r\n    z-index: 100;\r\n    /* Last, we make it invisible */\r\n    opacity: 0;\r\n    /* This one is just for ergonomy */\r\n    cursor: pointer;\r\n}\r\n\r\n.switch {\r\n    width: 100px;\r\n    height: 100px;\r\n   \r\n    \r\n    top: 50%;\r\n     transform: translate(-50%, -50%);\r\n    position: absolute;\r\n  left: 50%;\r\n}\r\n\r\n.switch label {\r\n    display: block;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    border-radius: 50%;\r\n    background: #eaeaea;\r\n    box-shadow: \r\n        0 3px 5px rgba(0,0,0,0.25),\r\n        inset 0 1px 0 rgba(255,255,255,0.3),\r\n        inset 0 -5px 5px rgba(100,100,100,0.1),\r\n        inset 0 5px 5px rgba(255,255,255,0.3);\r\n}\r\n\r\n.switch label:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    z-index: -1;\r\n    top: -8%; \r\n    right: -8%; \r\n    bottom: -8%; \r\n    left: -8%;\r\n    border-radius: inherit;\r\n    background: #ddd; /* Fallback */\r\n    background: linear-gradient(#ccc, #fff);\r\n    box-shadow: \r\n        inset 0 2px 1px rgba(0,0,0,0.15),\r\n        0 2px 5px rgba(200,200,200,0.1);\r\n}\r\n\r\n.switch label:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 20%;\r\n    height: 20%; \r\n    left: 40%;\r\n    top: 40%;\r\n    border-radius: inherit;\r\n    background: #969696; /* Fallback */\r\n    background: radial-gradient(40% 35%, #ccc, #969696 60%);\r\n    box-shadow:\r\n        inset 0 2px 4px 1px rgba(0,0,0,0.3),\r\n        0 1px 0 rgba(255,255,255,1),\r\n        inset 0 1px 0 white;\r\n}\r\n\r\n.switch input:checked ~ label { /* Button */\r\n\tbackground: #e5e5e5; /* Fallback */\r\n    background: linear-gradient(#dedede, #fdfdfd);\r\n}\r\n\r\n.switch input:checked ~ label:before { /* LED */\r\n    background: #25d025; /* Fallback */\r\n    background: radial-gradient(40% 35%, #5aef5a, #25d025 60%);\r\n    box-shadow:\r\n        inset 0 3px 5px 1px rgba(0,0,0,0.1),\r\n        0 1px 0 rgba(255,255,255,0.4),\r\n        0 0 10px 2px rgba(0, 210, 0, 0.5);\r\n}",
        "controllerScript": "var namespace;\nvar cssParser = new cssjs();\n\nself.onInit = function() {\n    var settings = self.ctx.settings;\n    \n    //Set Value Mathod\n    var convertStatusChangeMethod = settings.convertStatusChangeMethod || \"return value;\";\n    var convertStatus = new Function(\"value\", convertStatusChangeMethod);\n    \n    //Get Value Method\n    var convertGetValueMethod = settings.convertStatusRequestMethod || \"return data ? true : false;\";\n    \n    var convertGetValue = new Function(\"data\", convertGetValueMethod);\n    \n   \n    function requestStatus() {\n        method = settings.statusRequestMethod;\n        paramsBody = \"\";\n        self.ctx.controlApi.sendTwoWayCommand(method, \n                            paramsBody, \n                            settings.requestTimeout)\n            .subscribe(\n                function success(responseBody) {\n                       let value = (convertGetValue(responseBody));   \n                       console.log (value);\n                       if (value == true)\n                       {\n\n                       $('#switch', self.ctx.$container).click();\n                       \n                       }\n                        else\n                        {\n                        \n\n                        \n                        }\n                    }\n                    );\n                }\n                \n   \n                \n\n    requestStatus()\n    \n    \n    $('#switch', self.ctx.$container).click(function(e){\n  var method = settings.changeRequestMethod || 'setValue';\n        let checked = $('#switch', self.ctx.$container)[0].checked;\n        console.log(checked);\n        var paramsBody = convertStatus(checked);\n        console.log(method);\n        console.log(paramsBody);\n       \n        self.ctx.controlApi.sendOneWayCommand(method, \n                                    paramsBody, settings.requestTimeout)\n                    /*.subscribe(\n                        function success(responseBody) {\n                            \n                        }\n                    );*/\n});\n    self.onResize();\n    \n}\n\n\n\nself.onResize = function() {\n    if (self.ctx.width > self.ctx.height)\n        $('.switch', self.ctx.$container)[0].style.zoom = self.ctx.height / 150;\n    else\n        $('.switch', self.ctx.$container)[0].style.zoom = self.ctx.width / 150;\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            },\n            \"changeRequestMethod\": {\n                \"title\": \"RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"setValue\"\n            },\n            \"statusRequestMethod\": {\n                \"title\": \"RPC get value method\",\n                \"type\": \"string\",\n                \"default\": \"getValue\"\n            },\n            \"convertStatusChangeMethod\": {\n                \"title\": \"Convert value function, f(value), returns payload used by RPC set value method\",\n                \"type\": \"string\",\n                \"default\": \"return value;\"\n            } ,\n            \"convertStatusRequestMethod\": {\n                \"title\": \"Parse value function, f(data), returns boolean\",\n                \"type\": \"string\",\n                \"default\": \"return data ? true : false;\"\n            } \n        },\n        \"required\": [ \n                     \"requestTimeout\",\n                     \"changeRequestMethod\",\n                     \"statusRequestMethod\",\n                     \"convertStatusChangeMethod\",\n                     \"convertStatusRequestMethod\"\n                    ]\n    },\n    \"form\": [\n        \"statusRequestMethod\",\n        \"changeRequestMethod\",\n        {\n            \"key\": \"convertStatusRequestMethod\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"convertStatusChangeMethod\",\n            \"type\": \"javascript\"\n        },\n        \"requestTimeout\"\n            ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Toggle Button 1\"}"
      }
    },
    {
      "alias": "weekly_heatmap",
      "name": "Weekly Heatmap",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "timeseries",
        "sizeX": 4.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "https://cdn.jsdelivr.net/npm/echarts@5.3.0/dist/echarts.min.js"
          }
        ],
        "templateHtml": "<div id=\"echart\" style=\"width: 600px; height:100%; flow-direction: row; transform: scale(1); transform-origin: 0% 0% 100px\"></div>",
        "templateCss": ".legend {\n    font-size: 13px;\n    line-height: 10px;\n}\n\n.legend table { \n    border-spacing: 0px;\n    border-collapse: separate;\n}\n\n.mouse-events .flot-overlay {\n    cursor: crosshair; \n}\n\n",
        "controllerScript": "let data = [[0, 0, 55], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]]\n    .map(function (item) {\n    return [item[1], item[0], item[2] || '-'];\n});\nvar myChart;\nvar chartDom;\nvar option;\nself.onInit = function() {\n\n\nchartDom = $('#echart', self.ctx\n        .$container)[0];\n myChart = echarts.init(chartDom);\ndraw();\n\n}\n\nfunction draw()\n{\n    \n\n// prettier-ignore\nconst hours = [\n    '00:', '01:', '02:', '03:', '04:', '05:', '06:',\n    '07:', '08:', '09:', '10:', '11:',\n    '12:', '13:', '14:', '15:', '16:', '17:',\n    '18:', '19:', '20:', '21:', '22:', '23:'\n];\n// prettier-ignore\nconst days = [\n    'Saturday', 'Friday', 'Thursday',\n    'Wednesday', 'Tuesday', 'Monday', 'Sunday'\n];\n// prettier-ignore\n\n        \n\noption = {\n  tooltip: {\n    position: 'top',\n    formatter: function (params) {\n        console.log(params)\n      \n      return `${params.seriesName}<br />\n              ${params.data[0]}:00, Value: ${params.data[2]}`;\n    }\n  },\n  gradientColor:\n  \n      [\n        '#f6efa6',\n      '#d88273',\n      '#bf444c'\n          ]\n  ,\n  grid: {\n    height: '50%',\n    top: '10%'\n  },\n  xAxis: {\n    type: 'category',\n    data: hours,\n    splitArea: {\n      show: true\n    }\n  },\n  yAxis: {\n    type: 'category',\n    data: days,\n    splitArea: {\n      show: true\n    }\n  },\n  visualMap: {\n    min: self.ctx.settings.minScale || 0,\n    max: self.ctx.settings.maxScale || 100,\n    calculable: true,\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '15%'\n  },\n  series: [\n    {\n      name: self.ctx.data[0].dataKey.label,\n      type: 'heatmap',\n      data: data,\n      label: {\n        show: self.ctx.settings.showDataInHeatmap,\n        \n      },\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    }\n  ]\n};\nif (self.ctx.settings.style == 'Green')\n{\noption.gradientColor =\n[\n     '#e6ffe6',\n     '#00ff00',\n]\n}\n\noption && myChart.setOption(option);\n}\n\nself.onDataUpdated = function() {\n    \n    \nvar datasourceData = self.ctx.data[0];\nlet dataElement = Array();\n        var dataSet = datasourceData.data;\n        var dataToAdd = Array();\n        \n        for (var i = 0; i < dataSet.length; i++) {\n            \n            var tsValuePair = dataSet[i];\n            var ts = tsValuePair[0];\n            var value = tsValuePair[1];\n            \n            let day = new Date(ts).getDay()\n            let hour = new Date(ts).getHours();\n            \n            dataElement.push([6-day, hour, parseFloat(value).toFixed(self.ctx.settings.numberOfDigits)]);\n            \n            \n        }\n        \n       data =  dataElement.map(function (item) {\n    return [item[1], item[0], item[2] || '-'];\n});\n        \n        if (myChart != undefined)\n    {\n    option.series[0].data = data;\n    myChart.setOption(option);\n    }\n        \n}\n\nself.onResize = function() {\n       \n    let maxWidth = self.ctx.height / 0.55;\n    let width = self.ctx.width;\n    if (maxWidth < width)\n        width = self.ctx.height / 0.55;\n\n    $('#echart', self.ctx.$container)[0].style.transform =  \"scale(\" + (width / 600) + \")\";\n\n\n\n    $('#echart', self.ctx.$container)[0].style.marginTop = width * -0.05 +\"px\";\n    \n    self.onInit();\n    \n}\n\nself.onEditModeChanged = function() {\n    \n}\n\nself.getSettingsSchema = function() {\n   \n}\n\nself.getDataKeySettingsSchema = function() {\n    \n}\n\nself.onDestroy = function() {\n    \n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"showDataInHeatmap\": {\n                \"title\": \"Show Data in Heatmap\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"minScale\": {\n                \"title\": \"Min. Value\",\n                \"type\": \"number\",\n                \"default\": 0\n            },\n            \"maxScale\": {\n                \"title\": \"Max. Value\",\n                \"type\": \"number\",\n                \"default\": 100\n            },\n            \"numberOfDigits\": {\n                \"title\": \"Number of digits\",\n                \"type\": \"number\",\n                \"default\": 1\n            },\n            \"style\": {\n                \"title\": \"Type\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"Red\",\n                    \"Green\"],\n                \"default\": \"Red\"\n            }\n               \n        }\n        },\n    \"form\": [\n        \"showDataInHeatmap\",\n        \"minScale\",\n        \"maxScale\",\n        \"numberOfDigits\",\n        \"style\"\n        \n        \n        \n    ]\n}",
        "dataKeySettingsSchema": "{}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = Math.random() * 100;\\n\\nreturn value;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"hideInterval\":false,\"hideAggregation\":false,\"hideAggInterval\":false,\"hideTimezone\":false,\"selectedTab\":1,\"history\":{\"historyType\":0,\"timewindowMs\":604800000,\"interval\":3600000,\"fixedTimewindow\":{\"startTimeMs\":1652037003619,\"endTimeMs\":1652123403619},\"quickInterval\":\"CURRENT_DAY\"},\"aggregation\":{\"type\":\"AVG\",\"limit\":25000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"showDataInHeatmap\":true,\"minScale\":0,\"maxScale\":100,\"numberOfDigits\":0,\"style\":\"Green\"},\"title\":\"Weekly Heatmap\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"useDashboardTimewindow\":false,\"displayTimewindow\":false,\"showTitleIcon\":false,\"titleTooltip\":\"\",\"widgetStyle\":{},\"widgetCss\":\"\",\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    }
  ]
}